<INICIO> ::= <CODIGO> EOF

<CODIGO> ::= <CODIGO> <INSTRUCCION> 
                        |  <INSTRUCCION>

<INSTRUCCION> ::= <DECLARACIONESARR>	
				 |  <DECLARACIONES>
                                 |  <SENTENCIAS>
                                 |  <FUNCIONES>
                                 |  <METODOS> 
                                 |  <LLAMADAS> ;
                                 |  <FCOUT>
                                 |  <FEXECUTE>

<DECLARACIONES> ::= <TIPODATO> <LISTANVARIABLES>;
                                        | <TIPODATO> <LISTANVARIABLES> = <ASIGNACIONES>;
                                        | <LISTANVARIABLES> = <ASIGNACIONES> ;
					| id ++;
					| id --;
<DECLARACIONESARR> ::= <TIPODATO> <LISTANVARIABLES> [ ] = new <TIPODATO> [ <EXPRESIONES> ];
	             | <TIPODATO> <LISTANVARIABLES> [ ] = [ <LISTANEXPR> ];
		     | <TIPODATO> <LISTANVARIABLES> [ ] [ ] = new <TIPODATO> [ <EXPRESIONES> ] [ <EXPRESIONES> ];
	             | <TIPODATO> <LISTANVARIABLES> [ ] [ ] = [ <LISTASFILAS> ];
		     | id [ <EXPRESIONES> ] = <EXPRESIONES> ;
		     | id [ <EXPRESIONES> ] [ <EXPRESIONES> ] = <EXPRESIONES> ;
;

<LISTASFILAS> ::= [ <LISTANEXP> ] , <LISTASFILAS>
			| [ <LISTANEXP> ]
;


<LISTANEXP>:  <EXPRESIONES> signocoma <LISTANEXP>     
        |   <EXPRESIONES>                           
;

<LISTANEXPR>:  <EXPRESIONES> signocoma <LISTANEXPR>    
        |   <EXPRESIONES>                          
;

<LISTANVARIABLES> ::= id
                                        | id , <LISTANVARIABLES>

<TIPODATO> ::= int
                            |  double
                            |  bool
                            |  char
                            |  std::string

<ASIGNACIONES> ::= <EXPRESIONES>
		| <OTRASEXPRESIONES>
;

<EXPRESIONES>: <OPERACIONES>           
        | <OPERACIONESRELACIONAL>   
        | <OPERADORESLOGICOS>          
        | <ACCESOVEC>                 
        | id                       
        | caracter                 
        | cadena                   
        | bool                     
        | decimal                  
        | numero                 
;

<OTRASEXPRESIONES>: <CASTEAR>         
        | <OPERADORTERNARIO>      
        | <INCREYDECRE>             
        | <LLAMADAS>               
        | <FTOLOWER>               
        | <FTOUPPER>                
        | <FROUND>                  
        | <FLENGTH>                 
        | <FTYPEOF>                 
        | <FTOSTRING>                
        | <FCSTR>                   
; 

<ACCESOVEC> : id [ <EXPRESIONES>  ]  [ <EXPRESIONES>  ]   
         | id [ <EXPRESIONES>  ]      
;

<AGRUPACION> ::= ( <ASIGNACIONES> )

<OPERACIONES>  ::= <EXPRESIONES> + <EXPRESIONES>
                  | <EXPRESIONES> - <EXPRESIONES>
                  | <EXPRESIONES> * <EXPRESIONES>
                  | <EXPRESIONES> / <EXPRESIONES>
                  | <EXPRESIONES> % <EXPRESIONES>
                  | pow ( <EXPRESIONES> , <EXPRESIONES> )
                  | -  <EXPRESIONES>
		  | <AGRUPACION>

<OPERACIONESRELACIONAL>   ::= <EXPRESIONES> == <EXPRESIONES>
                           | <EXPRESIONES> != <EXPRESIONES>
                           | <EXPRESIONES> < <EXPRESIONES>
                           | <EXPRESIONES> > <EXPRESIONES>
                           | <EXPRESIONES> <= <EXPRESIONES>
                           | <EXPRESIONES> >= <EXPRESIONES> 

<OPERADORTERNARIO> ::= <OPERACIONESRELACIONAL> ? <ASIGNACIONES> : <ASIGNACIONES>

<OPERADORESLOGICOS>  ::=  <EXPRESIONES> || <EXPRESIONES>
                        | <EXPRESIONES> && <EXPRESIONES>
                        | ! <EXPRESIONES>

<CASTEAR> ::=   (  <TIPODATO>  ) <EXPRESIONES>

<INCREYDECRE> ::= <EXPRESIONES> ++
                | <EXPRESIONES> --

<SENTENCIAS>  ::= <SENTIF> 
                                | <SENTSWITCH>
                                | <SENTWHILE>
                                | <SENTFOR>
                                | <SENTDOWHILE>

<SENTIF> ::= if ( <EXPRESIONES> )  { <CONTENIDOS> <FINIF>


<CONDICIONALIF> ::= <OPERACIONESRELACIONAL>
                                    | <OPERADORESLOGICOS> 
                                    | id

<CONTENIDOS>: <CONTENIDOS> <CONTEIF>  
        | CONTEIF                                    
;

<CONTEIF>: break ;     
        | continue break;                          
        | <RETORNOS>                                                 
        | <INSTRUCCION>        
;

<FINIF> ::= } 
          | } else if ( <EXPRESIONES> )  { <CONTENIDOS> <FINIF>
          | } else { <CONTENIDOS> }

<SENTSWITCH> ::= switch  ( <EXPRESIONES> ) { <SWCASOS> }
<SWCASOS> ::= <SWCASE>
                           | <SWCASE> <SWCASOS>
<SWCASE> ::=  case <ASIGNACIONES> : <CONTENIDOS>
                        |  default : <CONTENIDOS>



<SENTWHILE> ::= while (<EXPRESIONES>) {<CONTENIDOSCICLOS> }

<SENTFOR> ::= for ( <DECLARACIONES> <EXPRESIONES> ; <INCREYDECRE>){ <CONTENIDOSCICLOS> }

<SENTDOWHILE> ::= do { <CONTENIDOSCICLOS> } while ( <EXPRESIONES> ) ;

<CONTENIDOSCICLOS>: <CONTENIDOSCICLOS> <CONTENIDOCICL>           
        | <CONTENIDOCICL>    
;
<CONTENIDOCICL>:break ;     
        | continue ;      
        | <RETORNOS>                        
        | <INSTRUCCION>                  
;


<RETORNOS> ::= return ;
                            | return  <ASIGNACIONES> ;

<FUNCIONES> ::= <TIPODATO> id <SNPARAMETROS> { <CONTENIDOSCICLOS> }

<SNPARAMETROS> ::= ( <PARAMETROS> )
                                        | ( ) 

<PARAMETROS> ::= <TIPODATO> id
                                |  <TIPODATO> id , <PARAMETROS>

<METODOS> ::= void id <SNPARAMETROS> { <CONTENIDOSMETOD> }

<CONTENIDOSMETOD> := <CODIGO>
                                | break ;
                                | continue ;

<LLAMADAS> ::= id <SNPARAMETROS>

<FCOUT> ::= cout << <ASIGNACIONES> ;
                    |  cout  << <ASIGNACIONES>  << endl ;

<FTOLOWER> ::= tolower ( <ASIGNACIONES>) 

<FTOUPPER> ::= toupper ( <ASIGNACIONES> )

<FROUND> ::= round (  <ASIGNACIONES>  )

<FLENGTH> ::= <ASIGNACIONES> . length ( ) 
 
<FTYPEOF> ::= typeof ( <ASIGNACIONES> ) 

<FTOSTRING> ::= std :: toString (<ASIGNACIONES> )

<FCSTR> ::= <ASIGNACIONES> . c_str ( )

<FEXECUTE> ::= execute id <SNPARAMETROS> ;