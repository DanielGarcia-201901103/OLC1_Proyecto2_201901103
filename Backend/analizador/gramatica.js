/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,13],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,31],$Va=[1,32],$Vb=[1,30],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[2,5,19,22,23,24,25,26,73,83,88,90,91,96,99,110],$Vg=[2,5,19,22,23,24,25,26,73,78,79,81,83,86,87,88,90,91,93,96,99,110],$Vh=[2,23],$Vi=[1,39],$Vj=[1,40],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[19,33,34,35,36,37,48,52,53,54,63],$Vo=[12,17],$Vp=[1,59],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,80],$Vx=[1,81],$Vy=[1,84],$Vz=[1,83],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[12,54,67,100],$VG=[1,93],$VH=[2,5,19,22,23,24,25,26,33,34,35,36,37,48,52,53,63,73,78,79,81,83,86,87,88,90,91,93,96,99,110],$VI=[1,102],$VJ=[1,103],$VK=[1,107],$VL=[1,108],$VM=[1,111],$VN=[1,133],$VO=[1,134],$VP=[1,121],$VQ=[1,120],$VR=[1,122],$VS=[1,123],$VT=[1,124],$VU=[1,125],$VV=[1,126],$VW=[1,127],$VX=[1,128],$VY=[1,129],$VZ=[1,130],$V_=[1,131],$V$=[1,132],$V01=[12,20,21,27,48,49,50,51,54,55,57,58,59,60,61,62,64,65,66,67,100,105],$V11=[12,20,21,48,49,50,51,54,55,57,58,59,60,61,62,64,65,67,100,105],$V21=[2,28],$V31=[2,30],$V41=[12,54,67,74,100],$V51=[2,19,22,23,24,25,26,73,78,79,81,83,88,90,91,93,96,99,110],$V61=[12,20,21,27,54,64,65,66,67,100,105],$V71=[1,192],$V81=[1,193],$V91=[2,19,22,23,24,25,26,73,78,79,81,83,86,87,88,90,91,93,96,99,110],$Va1=[12,20,21,27,48,49,54,57,58,59,60,61,62,64,65,66,67,100,105],$Vb1=[12,20,21,27,54,57,58,64,65,66,67,100,105],$Vc1=[12,20,21,27,54,57,58,59,60,61,62,64,65,66,67,100,105],$Vd1=[2,19,22,23,24,25,26,73,78,79,81,83,88,90,91,96,99,110],$Ve1=[1,221],$Vf1=[1,222],$Vg1=[1,227],$Vh1=[1,228],$Vi1=[1,239],$Vj1=[81,86,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CODIGO":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"SENTENCIAS":8,"FUNCIONES":9,"METODOS":10,"LLAMADAS":11,"sigpuntoycoma":12,"FCOUT":13,"FEXECUTE":14,"TIPODATO":15,"LISTANVARIABLES":16,"sigigual":17,"ASIGNACIONES":18,"id":19,"sigincremento":20,"sigdecremento":21,"resint":22,"resdouble":23,"resbool":24,"reschar":25,"resstring":26,"signocoma":27,"EXPRESIONES":28,"OTRASEXPRESIONES":29,"OPERACIONES":30,"OPERACIONESRELACIONAL":31,"OPERADORESLOGICOS":32,"caracter":33,"cadena":34,"bool":35,"decimal":36,"numero":37,"CASTEAR":38,"OPERADORTERNARIO":39,"INCREYDECRE":40,"FTOLOWER":41,"FTOUPPER":42,"FROUND":43,"FLENGTH":44,"FTYPEOF":45,"FTOSTRING":46,"FCSTR":47,"menos":48,"mas":49,"por":50,"dividir":51,"respotencia":52,"parentesisabre":53,"parentesiscierra":54,"modulo":55,"AGRUPACION":56,"igualigual":57,"negacionigual":58,"menorigual":59,"menorque":60,"mayorigual":61,"mayorque":62,"notlogico":63,"andlogico":64,"orlogico":65,"siginterrogacion":66,"dospuntos":67,"SENTIF":68,"SENTSWITCH":69,"SENTDOWHILE":70,"SENTWHILE":71,"SENTFOR":72,"resif":73,"llaveabre":74,"CONTENIDOS":75,"FINIF":76,"CONTEIF":77,"resbreak":78,"rescontinue":79,"RETORNOS":80,"llavecierra":81,"reselse":82,"resswitch":83,"SWCASOS":84,"SWCASE":85,"rescase":86,"resdefault":87,"reswhile":88,"CONTENIDOSCICLOS":89,"resfor":90,"resdo":91,"CONTENIDOCICL":92,"resreturn":93,"SNPARAMETROS":94,"PARAMETROS":95,"resvoid":96,"CONTENIDOSMETOD":97,"CONTMETOD":98,"rescout":99,"menormenor":100,"resendl":101,"restolower":102,"restoupper":103,"resround":104,"sigpunto":105,"reslength":106,"restypeof":107,"restostring":108,"rescstr":109,"resexecute":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"sigpuntoycoma",17:"sigigual",19:"id",20:"sigincremento",21:"sigdecremento",22:"resint",23:"resdouble",24:"resbool",25:"reschar",26:"resstring",27:"signocoma",33:"caracter",34:"cadena",35:"bool",36:"decimal",37:"numero",48:"menos",49:"mas",50:"por",51:"dividir",52:"respotencia",53:"parentesisabre",54:"parentesiscierra",55:"modulo",57:"igualigual",58:"negacionigual",59:"menorigual",60:"menorque",61:"mayorigual",62:"mayorque",63:"notlogico",64:"andlogico",65:"orlogico",66:"siginterrogacion",67:"dospuntos",73:"resif",74:"llaveabre",78:"resbreak",79:"rescontinue",81:"llavecierra",82:"reselse",83:"resswitch",86:"rescase",87:"resdefault",88:"reswhile",90:"resfor",91:"resdo",93:"resreturn",96:"resvoid",99:"rescout",100:"menormenor",101:"resendl",102:"restolower",103:"restoupper",104:"resround",105:"sigpunto",106:"reslength",107:"restypeof",108:"restostring",109:"rescstr",110:"resexecute"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,3],[7,5],[7,4],[7,3],[7,3],[7,2],[15,1],[15,1],[15,1],[15,1],[15,1],[16,3],[16,1],[18,1],[18,1],[18,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[30,2],[30,3],[30,3],[30,3],[30,3],[30,6],[30,3],[30,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[32,2],[32,3],[32,3],[39,5],[56,3],[38,4],[40,2],[40,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[68,7],[75,2],[75,1],[77,2],[77,2],[77,1],[77,1],[76,1],[76,9],[76,5],[69,7],[84,1],[84,2],[85,4],[85,3],[71,7],[72,10],[70,9],[89,2],[89,1],[92,2],[92,2],[92,1],[92,1],[80,2],[80,3],[9,6],[94,3],[94,2],[95,2],[95,4],[10,6],[97,2],[97,1],[98,2],[98,2],[98,1],[11,2],[13,6],[13,4],[41,4],[42,4],[43,4],[44,5],[45,4],[46,4],[47,5],[14,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2: case 76: case 93: case 107:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 77: case 94: case 108:
 this.$ = []; this.$.push($$[$0]);
break;
case 4:
console.log($$[$0]);this.$=$$[$0];
break;
case 5: case 6: case 7: case 9: case 10:
console.log($$[$0]); this.$=$$[$0];
break;
case 8:
console.log($$[$0-1]); this.$=$$[$0-1];
break;
case 11:
 this.$= new Asignacion($$[$0-1], new Dato("sindato", $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column), $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); limpiarlistVariables();
break;
case 12:
 this.$= new Asignacion($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); limpiarlistVariables();
break;
case 13:
 this.$= new Reasignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); limpiarlistVariables();
break;
case 14:
 this.$= new IncrementoDecremento($$[$0-2],new Oid($$[$0-2], "id", _$[$0-2].first_line, _$[$0-2].first_column, "id"),"++", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 15:
 this.$= new IncrementoDecremento($$[$0-2],new Oid($$[$0-2], "id", _$[$0-2].first_line, _$[$0-2].first_column, "id"),"--", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 16:
 addError('Error sintáctico', 'No se reconoce' + $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 17:
this.$="int";
break;
case 18:
this.$="double";
break;
case 19:
this.$="booleano";
break;
case 20:
this.$= "char";
break;
case 21:
this.$= "string";
break;
case 22:
  addVariables($$[$0-2]); concatenarlista($$[$0]); this.$=getLVariables();
break;
case 23:
addVariables($$[$0]); this.$=getLVariables();
break;
case 24: case 25: case 27: case 28: case 29: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 69: case 70: case 71: case 72: case 73: case 97: case 98: case 111:
this.$=$$[$0];
break;
case 26: case 74:
 addError('Error sintáctico', 'No se reconoce' + $$[$0], this._$.first_line, this._$.first_column);
break;
case 30:
this.$= new Oid($$[$0], "id", _$[$0].first_line, _$[$0].first_column, "id"); 
break;
case 31:
this.$= new Dato($$[$0], "char", _$[$0].first_line, _$[$0].first_column);
break;
case 32:
this.$= new Dato($$[$0], "string", _$[$0].first_line, _$[$0].first_column);
break;
case 33:
this.$= new Dato($$[$0], "booleano", _$[$0].first_line, _$[$0].first_column);
break;
case 34:
this.$= new Dato($$[$0], "double", _$[$0].first_line, _$[$0].first_column);
break;
case 35:
this.$= new Dato($$[$0], "int", _$[$0].first_line, _$[$0].first_column);
break;
case 47:
this.$= new Aritmetica($$[$0], $$[$0] , $$[$0-1] + "unario", _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 48: case 49: case 50: case 51: case 53:
this.$= new Aritmetica($$[$0-2],$$[$0],$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) ;
break;
case 52:
this.$= new Aritmetica($$[$0-3],$$[$0-1],$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column) ;
break;
case 54: case 80: case 81:
this.$= $$[$0];
break;
case 55: case 56: case 57: case 58: case 59: case 60:
this.$= new Relacional($$[$0-2],$$[$0],$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61:
this.$= new Logico($$[$0], $$[$0] ,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 62: case 63:
this.$= new Logico($$[$0-2], $$[$0] ,$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$=$$[$0-4] +" "+ $$[$0-3] +" "+ $$[$0-2] +$$[$0-1] + " " + $$[$0];
break;
case 65:
this.$= $$[$0-1];
break;
case 66:
this.$=new Castear($$[$0],$$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 67:
 this.$= new IncrementoDecremento2($$[$0-1],"++", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1].tipoid, $$[$0-1].id); 
break;
case 68:
 this.$= new IncrementoDecremento2($$[$0-1],"--", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1].tipoid, $$[$0-1].id); 
break;
case 75:
this.$= new If($$[$0-4], $$[$0-1], $$[$0] ,_$[$0-6].first_line, _$[$0-6].first_column); limpiarElSEIF();
break;
case 78: case 95: case 109:
this.$= new BBreak(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 79: case 96: case 110:
this.$= new Continu(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 82:
this.$=[$$[$0]];
break;
case 83:
addELSEif(new elseif($$[$0-4], $$[$0-1], $$[$0] , _$[$0-8].first_line, _$[$0-8].first_column)); this.$= getElSEIF();
break;
case 84:
this.$= [new soloelse($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column)];
break;
case 85:
this.$=new Switchh($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); limpiarlistCasos();
break;
case 86:
 addCasos($$[$0]); this.$=getCasos();
break;
case 87:
 addCasos($$[$0-1]); concatenarlistaCasos($$[$0]); this.$=getCasos();
break;
case 88:
this.$= new Scasos($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 89:
this.$= new Sdefault($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$= new Bwhile($$[$0-4], $$[$0-1],  _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 91:
this.$=$$[$0-9]+$$[$0-8]+" "+$$[$0-7]+" "+$$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" " +$$[$0-2]+$$[$0-1]+" "+$$[$0];
break;
case 92:
this.$= new Bdowhile($$[$0-6], $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 99: case 103:
this.$=$$[$0-1] + $$[$0];
break;
case 100:
this.$=$$[$0-2] + " " + $$[$0-1] + " "+ $$[$0];
break;
case 101:
this.$=$$[$0-5] + " "+ $$[$0-4] + " " + $$[$0-3] +$$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 102:
this.$=$$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
case 104:
this.$=$$[$0-1]+ $$[$0];
break;
case 105:
this.$=$$[$0-3] + " " +  $$[$0-2] +" " + $$[$0-1] + " "  +  $$[$0];
break;
case 106:
this.$=$$[$0-5] + " " + $$[$0-4] + " "+$$[$0-3] + $$[$0-2] + " " + $$[$0-1]+ " " + $$[$0];
break;
case 112:
this.$=$$[$0-1] + " " + $$[$0];
break;
case 113:
this.$= new Print($$[$0-3], "salto", _$[$0-5].first_line, _$[$0-5].first_column) ;
break;
case 114:
this.$= new Print($$[$0-1], "sinsalto", _$[$0-3].first_line, _$[$0-3].first_column) ;
break;
case 115:
this.$= new Ftolower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 116:
this.$= new Ftoupper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 117:
this.$= new Fround($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 118:
this.$=new Flength($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 119:
this.$=new Ftypeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 120:
this.$=new Ftostring($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 121:
this.$=$$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 122:
this.$=$$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,83:$V8,88:$V9,90:$Va,91:$Vb,96:$Vc,99:$Vd,110:$Ve},{1:[3]},{2:$V0,5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,83:$V8,88:$V9,90:$Va,91:$Vb,96:$Vc,99:$Vd,110:$Ve},o($Vf,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),{12:[1,35]},o($Vg,[2,9]),o($Vg,[2,10]),{16:36,19:[1,37]},{17:[1,38]},{17:$Vh,20:$Vi,21:$Vj,27:$Vk,53:$Vl,94:41},o($Vg,[2,74],{12:$Vm}),o($Vg,[2,69]),o($Vg,[2,70]),o($Vg,[2,71]),o($Vg,[2,72]),o($Vg,[2,73]),{19:[1,45]},{100:[1,46]},{19:[1,47]},o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),{53:[1,48]},{53:[1,49]},{74:[1,50]},{53:[1,51]},{53:[1,52]},{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,8]),{12:[1,53],17:[1,54]},o($Vo,$Vh,{94:55,27:$Vk,53:$Vl}),{2:$Vp,11:72,18:56,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{12:[1,90]},{12:[1,91]},o($VF,[2,112]),{16:92,19:$VG},{15:96,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,54:[1,95],95:94},o($VH,[2,16]),{53:$Vl,94:97},{2:$Vp,11:72,18:98,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{53:$Vl,94:99},{19:$VI,28:100,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:104,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,83:$V8,88:$V9,89:105,90:$Va,91:$Vb,92:106,93:$VM,96:$Vc,99:$Vd,110:$Ve},{19:$VI,28:112,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{2:[1,116],7:113,15:114,16:12,19:[1,115],22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},o($VH,[2,11]),{2:$Vp,11:72,18:117,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{74:[1,118]},{12:[1,119]},o($VF,[2,24],{20:$VN,21:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$,105:[1,135]}),o($VF,[2,25]),o($VF,[2,26]),o($V01,[2,27]),o($V11,$V21,{66:[1,136]}),o($V01,[2,29]),o($V11,$V31,{94:41,53:$Vl}),o($V01,[2,31]),o($V01,[2,32]),o($V01,[2,33]),o($V01,[2,34]),o($V01,[2,35]),o($VF,[2,36]),o($VF,[2,37]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),{19:$VI,28:137,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{53:[1,138]},o($V01,[2,54]),{19:$VI,28:139,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{15:140,19:$VI,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,28:141,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{53:[1,142]},{53:[1,143]},{53:[1,144]},{53:[1,145]},{53:[1,146]},o($VH,[2,14]),o($VH,[2,15]),o($Vo,[2,22]),o($Vo,$Vh,{27:$Vk}),{54:[1,147]},o($V41,[2,103]),{19:$VI,28:148,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{74:[1,149]},{12:[1,151],100:[1,150]},{12:[1,152]},{48:$VP,49:$VQ,50:$VR,51:$VS,54:[1,153],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},o($V01,$V21),o($V01,$V31),{19:$VI,28:141,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{48:$VP,49:$VQ,50:$VR,51:$VS,54:[1,154],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,81:[1,155],83:$V8,88:$V9,90:$Va,91:$Vb,92:156,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($V51,[2,94]),{12:[1,157]},{12:[1,158]},o($V51,[2,97]),o($V51,[2,98]),{2:$Vp,11:72,12:[1,159],18:160,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{48:$VP,49:$VQ,50:$VR,51:$VS,54:[1,161],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},{19:$VI,28:162,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{16:36,19:$VG},{17:$Vh,20:$Vi,21:$Vj,27:$Vk},{12:$Vm},{12:[1,163]},{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,83:$V8,88:$V9,89:164,90:$Va,91:$Vb,92:106,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($VH,[2,13]),{19:$VI,28:165,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:166,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:167,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:168,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:169,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:170,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:171,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:172,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:173,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:174,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:175,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:176,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{19:$VI,28:177,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},o($VF,[2,67]),o($VF,[2,68]),{106:[1,178],109:[1,179]},{2:$Vp,11:72,18:180,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},o($V01,[2,47]),{19:$VI,28:181,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},o($V61,[2,61],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),{54:[1,182]},{48:$VP,49:$VQ,50:$VR,51:$VS,54:[1,183],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},{2:$Vp,11:72,18:184,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{2:$Vp,11:72,18:185,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{2:$Vp,11:72,18:186,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{2:$Vp,11:72,18:187,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{2:$Vp,11:72,18:188,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},o($V41,[2,102]),{27:[1,189],48:$VP,49:$VQ,50:$VR,51:$VS,54:[2,104],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},{2:$V0,6:194,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$V71,79:$V81,83:$V8,88:$V9,90:$Va,91:$Vb,96:$Vc,97:190,98:191,99:$Vd,110:$Ve},{101:[1,195]},o($Vg,[2,114]),o($Vg,[2,122]),{74:[1,196]},{74:[1,197]},{88:[1,198]},o($V51,[2,93]),o($V51,[2,95]),o($V51,[2,96]),o($V91,[2,99]),{12:[1,199]},{74:[1,200]},{12:[1,201],48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},o($VH,[2,12]),{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,81:[1,202],83:$V8,88:$V9,90:$Va,91:$Vb,92:156,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($Va1,[2,48],{50:$VR,51:$VS,55:$VT}),o($Va1,[2,49],{50:$VR,51:$VS,55:$VT}),o($V01,[2,50]),o($V01,[2,51]),o($V01,[2,53]),o($Vb1,[2,55],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,59:$VW,60:$VX,61:$VY,62:$VZ}),o($Vb1,[2,56],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,59:$VW,60:$VX,61:$VY,62:$VZ}),o($Vc1,[2,57],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT}),o($Vc1,[2,58],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT}),o($Vc1,[2,59],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT}),o($Vc1,[2,60],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT}),o($V61,[2,62],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),o([12,20,21,27,54,65,66,67,100,105],[2,63],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_}),{53:[1,203]},{53:[1,204]},{67:[1,205]},{27:[1,206],48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},{19:$VI,28:207,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},o($V01,[2,65]),{54:[1,208]},{54:[1,209]},{54:[1,210]},{54:[1,211]},{54:[1,212]},{15:96,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,95:213},{2:$V0,6:194,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$V71,79:$V81,81:[1,214],83:$V8,88:$V9,90:$Va,91:$Vb,96:$Vc,98:215,99:$Vd,110:$Ve},o($Vd1,[2,108]),{12:[1,216]},{12:[1,217]},o($Vd1,[2,111]),{12:[1,218]},{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:219,77:220,78:$Ve1,79:$Vf1,80:223,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},{84:225,85:226,86:$Vg1,87:$Vh1},{53:[1,229]},o($V91,[2,100]),{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,83:$V8,88:$V9,89:230,90:$Va,91:$Vb,92:106,93:$VM,96:$Vc,99:$Vd,110:$Ve},{19:$VI,28:232,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,40:231,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},o($Vg,[2,101]),{54:[1,233]},{54:[1,234]},{2:$Vp,11:72,18:235,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{19:$VI,28:236,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},o($VF,[2,66],{48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$}),o($VF,[2,115]),o($VF,[2,116]),o($VF,[2,117]),o($VF,[2,119]),o($VF,[2,120]),{54:[2,105]},o($Vg,[2,106]),o($Vd1,[2,107]),o($Vd1,[2,109]),o($Vd1,[2,110]),o($Vg,[2,113]),{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,76:237,77:238,78:$Ve1,79:$Vf1,80:223,81:$Vi1,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($V91,[2,77]),{12:[1,240]},{12:[1,241]},o($V91,[2,80]),o($V91,[2,81]),{81:[1,242]},{81:[2,86],84:243,85:226,86:$Vg1,87:$Vh1},{2:$Vp,11:72,18:244,19:$Vq,28:57,29:58,30:60,31:61,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:69,39:70,40:71,41:73,42:74,43:75,44:76,45:77,46:78,47:79,48:$Vw,52:$Vx,53:$Vy,56:82,63:$Vz,102:$VA,103:$VB,104:$VC,107:$VD,108:$VE},{67:[1,245]},{19:$VI,28:246,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,81:[1,247],83:$V8,88:$V9,90:$Va,91:$Vb,92:156,93:$VM,96:$Vc,99:$Vd,110:$Ve},{54:[1,248]},{20:$VN,21:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},o($VF,[2,118]),o($VF,[2,121]),o($VF,[2,64]),{48:$VP,49:$VQ,50:$VR,51:$VS,54:[1,249],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},o($Vg,[2,75]),o($V91,[2,76]),o($Vg,[2,82],{82:[1,250]}),o($V91,[2,78]),o($V91,[2,79]),o($Vg,[2,85]),{81:[2,87]},{67:[1,251]},{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:252,77:220,78:$Ve1,79:$Vf1,80:223,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},{48:$VP,49:$VQ,50:$VR,51:$VS,54:[1,253],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},o($Vg,[2,90]),{74:[1,254]},o($V01,[2,52]),{73:[1,255],74:[1,256]},{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:257,77:220,78:$Ve1,79:$Vf1,80:223,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($Vj1,[2,89],{7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,68:15,69:16,70:17,71:18,72:19,80:223,6:224,77:238,2:$V0,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,73:$V7,78:$Ve1,79:$Vf1,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve}),{12:[1,258]},{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,83:$V8,88:$V9,89:259,90:$Va,91:$Vb,92:106,93:$VM,96:$Vc,99:$Vd,110:$Ve},{53:[1,260]},{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:261,77:220,78:$Ve1,79:$Vf1,80:223,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($Vj1,[2,88],{7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,68:15,69:16,70:17,71:18,72:19,80:223,6:224,77:238,2:$V0,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,73:$V7,78:$Ve1,79:$Vf1,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve}),o($Vg,[2,92]),{2:$V0,6:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,78:$VK,79:$VL,80:109,81:[1,262],83:$V8,88:$V9,90:$Va,91:$Vb,92:156,93:$VM,96:$Vc,99:$Vd,110:$Ve},{19:$VI,28:263,30:60,31:101,32:62,33:$Vr,34:$Vs,35:$Vt,36:$Vu,37:$Vv,48:$Vw,52:$Vx,53:$VJ,56:82,63:$Vz},{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,77:238,78:$Ve1,79:$Vf1,80:223,81:[1,264],83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($Vg,[2,91]),{48:$VP,49:$VQ,50:$VR,51:$VS,54:[1,265],55:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,64:$V_,65:$V$},o($Vg,[2,84]),{74:[1,266]},{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:267,77:220,78:$Ve1,79:$Vf1,80:223,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},{2:$V0,6:224,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,76:268,77:238,78:$Ve1,79:$Vf1,80:223,81:$Vi1,83:$V8,88:$V9,90:$Va,91:$Vb,93:$VM,96:$Vc,99:$Vd,110:$Ve},o($Vg,[2,83])],
defaultActions: {33:[2,1],213:[2,105],243:[2,87]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const {addError} = require("../analisisSem/manejoErrores");
const Dato = require("../interprete/expresion/Dato.js");
const Print = require("../interprete/instruccion/Print.js");
const Aritmetica = require("../interprete/expresion/Aritmetica.js");
const IncrementoDecremento = require("../interprete/expresion/IncrementoDecremento.js");
const IncrementoDecremento2 = require("../interprete/expresion/IncrementoDecremento2.js");
const Relacional = require("../interprete/expresion/Relacional.js");
const Asignacion = require("../interprete/instruccion/Asignacion.js");
const Reasignacion = require("../interprete/instruccion/Reasignacion.js");
const Logico = require("../interprete/expresion/Logicos.js");
const If = require("../interprete/instruccion/If.js");
const Bwhile = require("../interprete/instruccion/Bwhile.js");
const BBreak = require("../interprete/instruccion/BBreak.js");
const Castear = require("../interprete/otrasexpresiones/Castear.js"); 
const Ftolower = require("../interprete/otrasexpresiones/Ftolower.js"); 
const Ftoupper = require("../interprete/otrasexpresiones/Ftoupper.js"); 
const Flength = require("../interprete/otrasexpresiones/Flength.js"); 
const Fround = require("../interprete/otrasexpresiones/Fround.js"); 
const Ftypeof = require("../interprete/otrasexpresiones/Ftypeof.js"); 
const Ftostring = require("../interprete/otrasexpresiones/Ftostring.js"); 
const {addVariables, limpiarlistVariables, getLVariables, concatenarlista , addELSEif, getElSEIF, limpiarElSEIF, addCasos, getCasos, concatenarlistaCasos, limpiarlistCasos} = require("../interprete/instruccion/listId.js");
const Oid = require("../interprete/expresion/Oid.js");
const Bdowhile = require("../interprete/instruccion/Bdowhile.js");
const Continu = require("../interprete/instruccion/Continu.js");
const elseif = require("../interprete/instruccion/elseif.js");
const soloelse = require("../interprete/instruccion/soloelse.js");
const Switchh = require("../interprete/instruccion/Switchh.js");
const Scasos = require("../interprete/instruccion/Scasos.js");
const Sdefault = require("../interprete/instruccion/Sdefault.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2://comentario vlineas
break;
case 3:return 20;
break;
case 4:return 21;
break;
case 5:return 49;
break;
case 6:return 48;
break;
case 7:return 51;
break;
case 8:return 50;
break;
case 9:return 55;
break;
case 10:return 58;
break;
case 11:return 63;
break;
case 12:return 53;
break;
case 13:return 54;
break;
case 14:return 74;
break;
case 15:return 81;
break;
case 16:return 'corcheteabre';
break;
case 17:return 'corchetecierra';
break;
case 18:return 27;
break;
case 19:return 12;
break;
case 20:return 57;
break;
case 21:return 17;
break;
case 22:return 105;
break;
case 23:return 66;
break;
case 24:return 67;
break;
case 25:return 59;
break;
case 26:return 61;
break;
case 27:return 100;
break;
case 28:return 60;
break;
case 29:return 62;
break;
case 30:return 65;
break;
case 31:return 64;
break;
case 32:return 22;
break;
case 33:return 23;
break;
case 34:return 24;
break;
case 35:return 25;
break;
case 36:return 26;
break;
case 37:return 52;
break;
case 38:return 'resnew';
break;
case 39:return 73;
break;
case 40:return 82;
break;
case 41:return 83;
break;
case 42:return 86;
break;
case 43:return 87;
break;
case 44:return 88;
break;
case 45:return 90;
break;
case 46:return 91;
break;
case 47:return 78;
break;
case 48:return 79;
break;
case 49:return 93;
break;
case 50:return 96;
break;
case 51:return 99;
break;
case 52:return 101;
break;
case 53:return 102;
break;
case 54:return 103;
break;
case 55:return 104;
break;
case 56:return 106;
break;
case 57:return 107;
break;
case 58:return 108;
break;
case 59:return 109;
break;
case 60:return 110;
break;
case 61:return 35;
break;
case 62:return 36;
break;
case 63:return 37;
break;
case 64:return 19;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 33;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 34; 
break;
case 67:return 5;
break;
case 68:addError('Error léxico', 'Caracter no reconocido\" ' + yy_.yytext +' \" ', yy_.yylloc.first_line, yy_.yylloc.first_column); console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?::)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}