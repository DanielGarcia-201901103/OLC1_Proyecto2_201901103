/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,22],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[5,19,22,23,24,25,26,73,79,81,85,86,87,89,90,95,97,108],$Vf=[2,21],$Vg=[1,38],$Vh=[1,39],$Vi=[1,41],$Vj=[1,42],$Vk=[19,54],$Vl=[12,17],$Vm=[1,71],$Vn=[1,72],$Vo=[1,73],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,83],$Vt=[1,84],$Vu=[1,77],$Vv=[1,86],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[12,54,67,98],$VC=[1,90],$VD=[1,99],$VE=[1,100],$VF=[1,107],$VG=[1,108],$VH=[1,111],$VI=[5,12,19,22,23,24,25,26,73,79,81,85,86,87,89,90,95,97,108],$VJ=[1,115],$VK=[1,116],$VL=[1,119],$VM=[1,118],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[1,126],$VU=[1,127],$VV=[1,128],$VW=[1,129],$VX=[1,130],$VY=[12,20,21,27,48,49,50,51,54,55,57,58,59,60,61,62,64,65,66,67,98,103],$VZ=[12,20,21,48,49,50,51,54,55,57,58,59,60,61,62,64,65,67,98,103],$V_=[2,26],$V$=[2,28],$V01=[12,54,67,74,98],$V11=[12,20,21,27,54,64,65,66,67,98,103],$V21=[79,85,86],$V31=[12,20,21,27,48,49,54,57,58,59,60,61,62,64,65,66,67,98,103],$V41=[12,20,21,27,54,57,58,64,65,66,67,98,103],$V51=[12,20,21,27,54,57,58,59,60,61,62,64,65,66,67,98,103],$V61=[1,212],$V71=[1,217],$V81=[1,218];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CODIGO":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"SENTENCIAS":8,"FUNCIONES":9,"METODOS":10,"LLAMADAS":11,"sigpuntoycoma":12,"FCOUT":13,"FEXECUTE":14,"TIPODATO":15,"LISTANVARIABLES":16,"sigigual":17,"ASIGNACIONES":18,"id":19,"sigincremento":20,"sigdecremento":21,"resint":22,"resdouble":23,"resbool":24,"reschar":25,"resstring":26,"signocoma":27,"OTRASEXPRESIONES":28,"EXPRESIONES":29,"OPERACIONES":30,"OPERACIONESRELACIONAL":31,"OPERADORESLOGICOS":32,"caracter":33,"cadena":34,"bool":35,"decimal":36,"numero":37,"CASTEAR":38,"OPERADORTERNARIO":39,"INCREYDECRE":40,"FTOLOWER":41,"FTOUPPER":42,"FROUND":43,"FLENGTH":44,"FTYPEOF":45,"FTOSTRING":46,"FCSTR":47,"menos":48,"mas":49,"por":50,"dividir":51,"respotencia":52,"parentesisabre":53,"parentesiscierra":54,"modulo":55,"AGRUPACION":56,"igualigual":57,"negacionigual":58,"menorigual":59,"menorque":60,"mayorigual":61,"mayorque":62,"notlogico":63,"andlogico":64,"orlogico":65,"siginterrogacion":66,"dospuntos":67,"SENTIF":68,"SENTSWITCH":69,"SENTWHILE":70,"SENTFOR":71,"SENTDOWHILE":72,"resif":73,"llaveabre":74,"CONTENIDOS":75,"FINIF":76,"resbreak":77,"RETORNOS":78,"llavecierra":79,"reselse":80,"resswitch":81,"CONDICIONALIF":82,"SWCASOS":83,"SWCASE":84,"rescase":85,"resdefault":86,"reswhile":87,"CONTENIDOSCICLOS":88,"resfor":89,"resdo":90,"rescontinue":91,"resreturn":92,"SNPARAMETROS":93,"PARAMETROS":94,"resvoid":95,"CONTENIDOSMETOD":96,"rescout":97,"menormenor":98,"resendl":99,"restolower":100,"restoupper":101,"resround":102,"sigpunto":103,"reslength":104,"restypeof":105,"restostring":106,"rescstr":107,"resexecute":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"sigpuntoycoma",17:"sigigual",19:"id",20:"sigincremento",21:"sigdecremento",22:"resint",23:"resdouble",24:"resbool",25:"reschar",26:"resstring",27:"signocoma",33:"caracter",34:"cadena",35:"bool",36:"decimal",37:"numero",48:"menos",49:"mas",50:"por",51:"dividir",52:"respotencia",53:"parentesisabre",54:"parentesiscierra",55:"modulo",57:"igualigual",58:"negacionigual",59:"menorigual",60:"menorque",61:"mayorigual",62:"mayorque",63:"notlogico",64:"andlogico",65:"orlogico",66:"siginterrogacion",67:"dospuntos",73:"resif",74:"llaveabre",77:"resbreak",79:"llavecierra",80:"reselse",81:"resswitch",82:"CONDICIONALIF",85:"rescase",86:"resdefault",87:"reswhile",89:"resfor",90:"resdo",91:"rescontinue",92:"resreturn",95:"resvoid",97:"rescout",98:"menormenor",99:"resendl",100:"restolower",101:"restoupper",102:"resround",103:"sigpunto",104:"reslength",105:"restypeof",106:"restostring",107:"rescstr",108:"resexecute"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,3],[7,5],[7,4],[7,3],[7,3],[15,1],[15,1],[15,1],[15,1],[15,1],[16,1],[16,3],[18,1],[18,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,2],[30,3],[30,3],[30,3],[30,3],[30,6],[30,3],[30,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[32,2],[32,3],[32,3],[39,5],[56,3],[38,4],[40,2],[40,2],[8,1],[8,1],[8,1],[8,1],[8,1],[68,7],[75,2],[75,1],[75,1],[76,1],[76,3],[76,5],[69,7],[83,1],[83,2],[84,4],[84,3],[70,7],[71,11],[72,9],[88,2],[88,2],[88,1],[88,1],[78,2],[78,3],[9,6],[93,3],[93,2],[94,2],[94,4],[10,6],[96,2],[96,2],[96,1],[11,2],[13,4],[13,6],[41,4],[42,4],[43,4],[44,5],[45,4],[46,4],[47,5],[14,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3:
 this.$ = $$[$0];
break;
case 4: case 5: case 6: case 7: case 9: case 10: case 16: case 17: case 18: case 19: case 20: case 21: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 52:
this.$=$$[$0];
break;
case 8:
this.$=$$[$0-1];
break;
case 11:
console.log($$[$0-2] + " "+ $$[$0-1] + $$[$0]); this.$=$$[$0-2];
break;
case 12:
console.log($$[$0-4] + " "+ $$[$0-3] + $$[$0-2] + " "+$$[$0-1]+$$[$0]);this.$=$$[$0-4];
break;
case 13:
console.log($$[$0-3] + " "+ $$[$0-2] + " "+ $$[$0-1] +$$[$0]); this.$=$$[$0-3];
break;
case 14: case 15:
console.log($$[$0-2] + " "+ $$[$0-1] + " "+ $$[$0]); this.$=$$[$0-2];
break;
case 22:
this.$=$$[$0-2] + " "+ $$[$0-1] + " " + $$[$0];
break;
case 45:
this.$=$$[$0-1] + $$[$0];
break;
case 46: case 47: case 48: case 49: case 51: case 53: case 54: case 55: case 56: case 57: case 58: case 60: case 61:
this.$=$$[$0-2] + " " + $$[$0-1] + " " + $$[$0] ;
break;
case 50:
this.$=$$[$0-5] + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] +" " + $$[$0-1] + $$[$0];
break;
case 59:
this.$=$$[$0-1] + " " + $$[$0] ;
break;
case 62:
this.$=$$[$0-4] +" "+ $$[$0-3] +" "+ $$[$0-2] +$$[$0-1] + " " + $$[$0];
break;
case 63:
this.$=$$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
case 64:
this.$=$$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
case 65: case 66: case 73: case 81: case 87: case 88: case 91: case 95: case 96: case 99: case 100: case 102:
console.log($$[$0-1]);this.$=$$[$0-1];
break;
case 67: case 68: case 69: case 70: case 71: case 74: case 75: case 76: case 80: case 89: case 90: case 101:
console.log($$[$0]);this.$=$$[$0];
break;
case 72: case 79: case 84:
console.log($$[$0-6]);this.$=$$[$0-6];
break;
case 77: case 83: case 92: case 94:
console.log($$[$0-2]);this.$=$$[$0-2];
break;
case 78: case 108: case 111:
console.log($$[$0-4]);this.$=$$[$0-4];
break;
case 82: case 97: case 103: case 105: case 106: case 107: case 109: case 110: case 112:
console.log($$[$0-3]);this.$=$$[$0-3];
break;
case 85:
console.log($$[$0-10]);this.$=$$[$0-10];
break;
case 86:
console.log($$[$0-8]);this.$=$$[$0-8];
break;
case 93: case 98: case 104:
console.log($$[$0-5]);this.$=$$[$0-5];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},{1:[3]},{5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),{12:[1,34]},o($Ve,[2,9]),o($Ve,[2,10]),{16:35,19:[1,36]},{17:[1,37]},{17:$Vf,20:$Vg,21:$Vh,27:$Vi,53:$Vj,93:40},o($Ve,[2,67]),o($Ve,[2,68]),o($Ve,[2,69]),o($Ve,[2,70]),o($Ve,[2,71]),{19:[1,43]},{98:[1,44]},{19:[1,45]},o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),{53:[1,46]},{53:[1,47]},{53:[1,48]},{53:[1,49]},{74:[1,50]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,8]),{12:[1,51],17:[1,52]},o($Vl,$Vf,{93:53,27:$Vi,53:$Vj}),{11:60,18:54,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{12:[1,87]},{12:[1,88]},o($VB,[2,102]),{16:89,19:$VC},{15:93,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,54:[1,92],94:91},{53:$Vj,93:94},{11:60,18:95,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{53:$Vj,93:96},{19:$VD,29:97,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{82:[1,101]},{82:[1,102]},{7:103,15:104,16:12,19:[1,105],22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},{4:110,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,77:$VF,78:109,81:$V7,87:$V8,88:106,89:$V9,90:$Va,91:$VG,92:$VH,95:$Vb,97:$Vc,108:$Vd},o($VI,[2,11]),{11:60,18:112,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{74:[1,113]},{12:[1,114]},o($VB,[2,23]),o($VB,[2,24],{20:$VJ,21:$VK,48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW,65:$VX,103:[1,117]}),o($VB,[2,34]),o($VB,[2,35]),o($VB,[2,36]),o($VB,[2,37]),o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),o($VB,[2,43]),o($VB,[2,44]),o($VY,[2,25]),o($VZ,$V_,{66:[1,131]}),o($VY,[2,27]),o($VZ,$V$,{93:40,53:$Vj}),o($VY,[2,29]),o($VY,[2,30]),o($VY,[2,31]),o($VY,[2,32]),o($VY,[2,33]),{15:132,19:$VD,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,29:133,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{53:[1,134]},{53:[1,135]},{53:[1,136]},{53:[1,137]},{53:[1,138]},{19:$VD,29:139,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{53:[1,140]},o($VY,[2,52]),{19:$VD,29:141,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},o($VI,[2,14]),o($VI,[2,15]),o($Vl,[2,22]),o($Vl,$Vf,{27:$Vi}),{54:[1,142]},o($V01,[2,95]),{19:[1,143]},{74:[1,144]},{12:[1,145],98:[1,146]},{12:[1,147]},{48:$VL,49:$VM,50:$VN,51:$VO,54:[1,148],55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW,65:$VX},o($VY,$V_),o($VY,$V$),{19:$VD,29:133,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{54:[1,149]},{54:[1,150]},{12:[1,151]},{16:35,19:$VC},{17:$Vf,20:$Vg,21:$Vh,27:$Vi},{79:[1,152]},{12:[1,153]},{12:[1,154]},{79:[2,89]},{6:33,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,79:[2,90],81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},{11:60,12:[1,155],18:156,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{12:[1,157]},{4:110,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,77:$VF,78:109,81:$V7,87:$V8,88:158,89:$V9,90:$Va,91:$VG,92:$VH,95:$Vb,97:$Vc,108:$Vd},o($VI,[2,13]),o($VB,[2,65]),o($VB,[2,66]),{104:[1,159],107:[1,160]},{19:$VD,29:161,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:162,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:163,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:164,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:165,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:166,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:167,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:168,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:169,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:170,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:171,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:172,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{19:$VD,29:173,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{11:60,18:174,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{54:[1,175]},{48:$VL,49:$VM,50:$VN,51:$VO,54:[1,176],55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW,65:$VX},{11:60,18:177,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{11:60,18:178,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{11:60,18:179,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{11:60,18:180,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{11:60,18:181,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},o($VY,[2,45]),{19:$VD,29:182,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},o($V11,[2,59],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV}),o($V01,[2,94]),{27:[1,183],54:[2,96]},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,77:[1,185],81:$V7,87:$V8,89:$V9,90:$Va,91:[1,186],95:$Vb,96:184,97:$Vc,108:$Vd},o($Ve,[2,103]),{99:[1,188]},o($Ve,[2,112]),{74:[1,189]},{74:[1,190]},{74:[1,191]},{82:[1,192]},{87:[1,193]},{79:[2,87]},{79:[2,88]},o($V21,[2,91]),{12:[1,194]},o($VI,[2,12]),{79:[1,195]},{53:[1,196]},{53:[1,197]},o($V31,[2,46],{50:$VN,51:$VO,55:$VP}),o($V31,[2,47],{50:$VN,51:$VO,55:$VP}),o($VY,[2,48]),o($VY,[2,49]),o($VY,[2,51]),o($V41,[2,53],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,59:$VS,60:$VT,61:$VU,62:$VV}),o($V41,[2,54],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,59:$VS,60:$VT,61:$VU,62:$VV}),o($V51,[2,55],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP}),o($V51,[2,56],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP}),o($V51,[2,57],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP}),o($V51,[2,58],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP}),o($V11,[2,60],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV}),o([12,20,21,27,54,65,66,67,98,103],[2,61],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW}),{67:[1,198]},{19:$VD,29:199,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},o($VY,[2,63]),{54:[1,200]},{54:[1,201]},{54:[1,202]},{54:[1,203]},{54:[1,204]},{27:[1,205],48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW,65:$VX},{15:93,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,94:206},{79:[1,207]},{12:[1,208]},{12:[1,209]},{6:33,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,79:[2,101],81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},{12:[1,210]},{4:214,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,75:211,77:$V61,78:213,81:$V7,87:$V8,89:$V9,90:$Va,92:$VH,95:$Vb,97:$Vc,108:$Vd},{83:215,84:216,85:$V71,86:$V81},{4:110,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,77:$VF,78:109,81:$V7,87:$V8,88:219,89:$V9,90:$Va,91:$VG,92:$VH,95:$Vb,97:$Vc,108:$Vd},{12:[1,220]},{53:[1,221]},o($V21,[2,92]),o($Ve,[2,93]),{54:[1,222]},{54:[1,223]},{11:60,18:224,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},o($VB,[2,64],{48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW,65:$VX}),o($VB,[2,105]),o($VB,[2,106]),o($VB,[2,107]),o($VB,[2,109]),o($VB,[2,110]),{19:$VD,29:225,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{54:[2,97]},o($Ve,[2,98]),{79:[2,99]},{79:[2,100]},o($Ve,[2,104]),{76:226,79:[1,227]},{12:[1,228]},o($V21,[2,74]),o($V21,[2,75],{7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,68:14,69:15,70:16,71:17,72:18,6:33,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,73:$V6,81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd}),{79:[1,229]},{79:[2,80],83:230,84:216,85:$V71,86:$V81},{11:60,18:231,19:$Vm,28:55,29:56,30:68,31:69,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:57,39:58,40:59,41:61,42:62,43:63,44:64,45:65,46:66,47:67,48:$Vs,52:$Vt,53:$Vu,56:85,63:$Vv,100:$Vw,101:$Vx,102:$Vy,105:$Vz,106:$VA},{67:[1,232]},{79:[1,233]},{19:$VD,29:235,30:68,31:98,32:70,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,40:234,48:$Vs,52:$Vt,53:$VE,56:85,63:$Vv},{82:[1,236]},o($VB,[2,108]),o($VB,[2,111]),o($VB,[2,62]),{48:$VL,49:$VM,50:$VN,51:$VO,54:[1,237],55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW,65:$VX},o($Ve,[2,72]),o($Ve,[2,76],{80:[1,238]}),o($V21,[2,73]),o($Ve,[2,79]),{79:[2,81]},{67:[1,239]},{4:214,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,75:240,77:$V61,78:213,81:$V7,87:$V8,89:$V9,90:$Va,92:$VH,95:$Vb,97:$Vc,108:$Vd},o($Ve,[2,84]),{54:[1,241]},{20:$VJ,21:$VK,48:$VL,49:$VM,50:$VN,51:$VO,55:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,64:$VW,65:$VX},{54:[1,242]},o($VY,[2,50]),{68:243,73:$V6,74:[1,244]},{4:214,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,75:245,77:$V61,78:213,81:$V7,87:$V8,89:$V9,90:$Va,92:$VH,95:$Vb,97:$Vc,108:$Vd},o($V21,[2,83]),{74:[1,246]},{12:[1,247]},o($Ve,[2,77]),{4:214,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,75:248,77:$V61,78:213,81:$V7,87:$V8,89:$V9,90:$Va,92:$VH,95:$Vb,97:$Vc,108:$Vd},o($V21,[2,82]),{4:110,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,68:14,69:15,70:16,71:17,72:18,73:$V6,77:$VF,78:109,81:$V7,87:$V8,88:249,89:$V9,90:$Va,91:$VG,92:$VH,95:$Vb,97:$Vc,108:$Vd},o($Ve,[2,86]),{79:[1,250]},{79:[1,251]},o($Ve,[2,78]),o($Ve,[2,85])],
defaultActions: {32:[2,1],109:[2,89],153:[2,87],154:[2,88],206:[2,97],208:[2,99],209:[2,100],230:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//const {Aritmetica,tipoArit} = require('./expresion/Aritmetica')
//const {Relacional,TipoRel} = require('./expresion/relaciones')
//const {tipo} = require('./expresion/retorno')
//const {Variable} = require('./expresion/variable')
//const {Nativo,tipoNat} = require('./expresion/nativo')
//const {Declarar} = require('./instrucciones/declarar')
//const {Print} = require('./instrucciones/print')
//const {Bloque} = require('./instrucciones/bloque')
//const {If} = require('./instrucciones/If')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2://comentario vlineas
break;
case 3:return 20;
break;
case 4:return 21;
break;
case 5:return 49;
break;
case 6:return 48;
break;
case 7:return 51;
break;
case 8:return 50;
break;
case 9:return 55;
break;
case 10:return 63;
break;
case 11:return 53;
break;
case 12:return 54;
break;
case 13:return 74;
break;
case 14:return 79;
break;
case 15:return 'corcheteabre';
break;
case 16:return 'corchetecierra';
break;
case 17:return 27;
break;
case 18:return 12;
break;
case 19:return 57;
break;
case 20:return 17;
break;
case 21:return 103;
break;
case 22:return 66;
break;
case 23:return 67;
break;
case 24:return 58;
break;
case 25:return 59;
break;
case 26:return 61;
break;
case 27:return 98;
break;
case 28:return 60;
break;
case 29:return 62;
break;
case 30:return 65;
break;
case 31:return 64;
break;
case 32:return 22;
break;
case 33:return 23;
break;
case 34:return 24;
break;
case 35:return 25;
break;
case 36:return 26;
break;
case 37:return 52;
break;
case 38:return 'resnew';
break;
case 39:return 73;
break;
case 40:return 80;
break;
case 41:return 81;
break;
case 42:return 85;
break;
case 43:return 86;
break;
case 44:return 87;
break;
case 45:return 89;
break;
case 46:return 90;
break;
case 47:return 77;
break;
case 48:return 91;
break;
case 49:return 92;
break;
case 50:return 95;
break;
case 51:return 97;
break;
case 52:return 99;
break;
case 53:return 100;
break;
case 54:return 101;
break;
case 55:return 102;
break;
case 56:return 104;
break;
case 57:return 105;
break;
case 58:return 106;
break;
case 59:return 107;
break;
case 60:return 108;
break;
case 61:return 35;
break;
case 62:return 36;
break;
case 63:return 37;
break;
case 64:return 19;
break;
case 65:return 33;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 34; 
break;
case 67:return 5;
break;
case 68:console.log(yy_.yylloc.first_line, yy_.yylloc.first_columm, 'Lexico', yy_.yytext)
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}