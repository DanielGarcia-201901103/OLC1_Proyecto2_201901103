/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,14],$V2=[1,24],$V3=[1,25],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,32],$Va=[1,33],$Vb=[1,31],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[2,5,20,31,32,33,34,35,80,90,95,97,98,103,106,117],$Vg=[2,5,20,31,32,33,34,35,80,85,86,88,90,93,94,95,97,98,100,103,106,117],$Vh=[2,34],$Vi=[1,40],$Vj=[1,41],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[20,23,40,41,42,43,44,55,59,60,61,70],$Vo=[1,55],$Vp=[1,56],$Vq=[13,18,23],$Vr=[1,61],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,82],$Vz=[1,83],$VA=[1,86],$VB=[1,85],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[13,61,74,107],$VI=[1,95],$VJ=[2,5,20,31,32,33,34,35,40,41,42,43,44,55,59,60,70,80,85,86,88,90,93,94,95,97,98,100,103,106,117],$VK=[1,104],$VL=[1,105],$VM=[1,109],$VN=[1,110],$VO=[1,113],$VP=[1,136],$VQ=[1,137],$VR=[1,124],$VS=[1,123],$VT=[1,125],$VU=[1,126],$VV=[1,127],$VW=[1,128],$VX=[1,129],$VY=[1,130],$VZ=[1,131],$V_=[1,132],$V$=[1,133],$V01=[1,134],$V11=[1,135],$V21=[13,21,22,24,30,55,56,57,58,61,62,64,65,66,67,68,69,71,72,73,74,107,112],$V31=[13,21,22,55,56,57,58,61,62,64,65,66,67,68,69,71,72,74,107,112],$V41=[2,39],$V51=[2,41],$V61=[13,61,74,81,107],$V71=[2,20,31,32,33,34,35,80,85,86,88,90,95,97,98,100,103,106,117],$V81=[13,21,22,24,30,61,71,72,73,74,107,112],$V91=[1,198],$Va1=[1,199],$Vb1=[2,20,31,32,33,34,35,80,85,86,88,90,93,94,95,97,98,100,103,106,117],$Vc1=[13,21,22,24,30,55,56,61,64,65,66,67,68,69,71,72,73,74,107,112],$Vd1=[13,21,22,24,30,61,64,65,71,72,73,74,107,112],$Ve1=[13,21,22,24,30,61,64,65,66,67,68,69,71,72,73,74,107,112],$Vf1=[2,20,31,32,33,34,35,80,85,86,88,90,95,97,98,103,106,117],$Vg1=[1,230],$Vh1=[1,231],$Vi1=[1,236],$Vj1=[1,237],$Vk1=[1,252],$Vl1=[1,278],$Vm1=[88,93,94];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CODIGO":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONESARR":7,"DECLARACIONES":8,"SENTENCIAS":9,"FUNCIONES":10,"METODOS":11,"LLAMADAS":12,"sigpuntoycoma":13,"FCOUT":14,"FEXECUTE":15,"TIPODATO":16,"LISTANVARIABLES":17,"sigigual":18,"ASIGNACIONES":19,"id":20,"sigincremento":21,"sigdecremento":22,"corcheteabre":23,"corchetecierra":24,"resnew":25,"EXPRESIONES":26,"LISTANEXPR":27,"LISTASFILAS":28,"LISTANEXP":29,"signocoma":30,"resint":31,"resdouble":32,"resbool":33,"reschar":34,"resstring":35,"OTRASEXPRESIONES":36,"OPERACIONES":37,"OPERACIONESRELACIONAL":38,"OPERADORESLOGICOS":39,"caracter":40,"cadena":41,"bool":42,"decimal":43,"numero":44,"CASTEAR":45,"OPERADORTERNARIO":46,"INCREYDECRE":47,"FTOLOWER":48,"FTOUPPER":49,"FROUND":50,"FLENGTH":51,"FTYPEOF":52,"FTOSTRING":53,"FCSTR":54,"menos":55,"mas":56,"por":57,"dividir":58,"respotencia":59,"parentesisabre":60,"parentesiscierra":61,"modulo":62,"AGRUPACION":63,"igualigual":64,"negacionigual":65,"menorigual":66,"menorque":67,"mayorigual":68,"mayorque":69,"notlogico":70,"andlogico":71,"orlogico":72,"siginterrogacion":73,"dospuntos":74,"SENTIF":75,"SENTSWITCH":76,"SENTDOWHILE":77,"SENTWHILE":78,"SENTFOR":79,"resif":80,"llaveabre":81,"CONTENIDOS":82,"FINIF":83,"CONTEIF":84,"resbreak":85,"rescontinue":86,"RETORNOS":87,"llavecierra":88,"reselse":89,"resswitch":90,"SWCASOS":91,"SWCASE":92,"rescase":93,"resdefault":94,"reswhile":95,"CONTENIDOSCICLOS":96,"resfor":97,"resdo":98,"CONTENIDOCICL":99,"resreturn":100,"SNPARAMETROS":101,"PARAMETROS":102,"resvoid":103,"CONTENIDOSMETOD":104,"CONTMETOD":105,"rescout":106,"menormenor":107,"resendl":108,"restolower":109,"restoupper":110,"resround":111,"sigpunto":112,"reslength":113,"restypeof":114,"restostring":115,"rescstr":116,"resexecute":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"sigpuntoycoma",18:"sigigual",20:"id",21:"sigincremento",22:"sigdecremento",23:"corcheteabre",24:"corchetecierra",25:"resnew",30:"signocoma",31:"resint",32:"resdouble",33:"resbool",34:"reschar",35:"resstring",40:"caracter",41:"cadena",42:"bool",43:"decimal",44:"numero",55:"menos",56:"mas",57:"por",58:"dividir",59:"respotencia",60:"parentesisabre",61:"parentesiscierra",62:"modulo",64:"igualigual",65:"negacionigual",66:"menorigual",67:"menorque",68:"mayorigual",69:"mayorque",70:"notlogico",71:"andlogico",72:"orlogico",73:"siginterrogacion",74:"dospuntos",80:"resif",81:"llaveabre",85:"resbreak",86:"rescontinue",88:"llavecierra",89:"reselse",90:"resswitch",93:"rescase",94:"resdefault",95:"reswhile",97:"resfor",98:"resdo",100:"resreturn",103:"resvoid",106:"rescout",107:"menormenor",108:"resendl",109:"restolower",110:"restoupper",111:"resround",112:"sigpunto",113:"reslength",114:"restypeof",115:"restostring",116:"rescstr",117:"resexecute"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[8,3],[8,5],[8,4],[8,3],[8,3],[8,2],[7,11],[7,9],[7,16],[7,11],[28,5],[28,3],[29,3],[29,1],[27,3],[27,1],[16,1],[16,1],[16,1],[16,1],[16,1],[17,3],[17,1],[19,1],[19,1],[19,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[37,2],[37,3],[37,3],[37,3],[37,3],[37,6],[37,3],[37,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[39,2],[39,3],[39,3],[46,5],[63,3],[45,4],[47,2],[47,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[75,7],[82,2],[82,1],[84,2],[84,2],[84,1],[84,1],[83,1],[83,9],[83,5],[76,7],[91,1],[91,2],[92,4],[92,3],[78,7],[79,10],[77,9],[96,2],[96,1],[99,2],[99,2],[99,1],[99,1],[87,2],[87,3],[10,6],[101,3],[101,2],[102,2],[102,4],[11,6],[104,2],[104,1],[105,2],[105,2],[105,1],[12,2],[14,6],[14,4],[48,4],[49,4],[50,4],[51,5],[52,4],[53,4],[54,5],[15,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2: case 87: case 104: case 118:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 88: case 105: case 119:
 this.$ = []; this.$.push($$[$0]);
break;
case 4: case 5:
console.log($$[$0]);this.$=$$[$0];
break;
case 6: case 7: case 8: case 10: case 11:
console.log($$[$0]); this.$=$$[$0];
break;
case 9:
console.log($$[$0-1]); this.$=$$[$0-1];
break;
case 12:
 this.$= new Asignacion($$[$0-1], new Dato("sindato", $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column), $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); limpiarlistVariables();
break;
case 13:
 this.$= new Asignacion($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); limpiarlistVariables();
break;
case 14:
 this.$= new Reasignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); limpiarlistVariables();
break;
case 15:
 this.$= new IncrementoDecremento($$[$0-2],new Oid($$[$0-2], "id", _$[$0-2].first_line, _$[$0-2].first_column, "id"),"++", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 16:
 this.$= new IncrementoDecremento($$[$0-2],new Oid($$[$0-2], "id", _$[$0-2].first_line, _$[$0-2].first_column, "id"),"--", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 17:
 addError('Error sint√°ctico', 'No se reconoce' + $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 18:
 this.$= new AsignacionV($$[$0-10], $$[$0-9], $$[$0-4], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column);  limpiarlistVariables();
break;
case 19:
 this.$= new AsignacionVT($$[$0-8], $$[$0-7], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);  limpiarlistVariables(); limpiarlistExp();
break;
case 20:
 this.$= new AsignacionV2($$[$0-15], $$[$0-14], $$[$0-7], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column);  limpiarlistVariables();
break;
case 21:
 this.$= new AsignacionV2T($$[$0-10], $$[$0-9], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column);  limpiarLSMA();
break;
case 22:
 addLSMA($$[$0-3]); concatenarLSMA($$[$0]); this.$=getLSMA(); 
break;
case 23:
 addLSMA($$[$0-1]); this.$=getLSMA(); 
break;
case 24:
  addExp($$[$0-2]); concatenarlistaExp($$[$0]); this.$=getExp(); limpiarlistExp();
break;
case 25:
  addExp($$[$0]); this.$=getExp(); 
break;
case 26:
  addExp($$[$0-2]); concatenarlistaExp($$[$0]); this.$=getExp();
break;
case 27:
  addExp($$[$0]); this.$=getExp();
break;
case 28:
this.$="int";
break;
case 29:
this.$="double";
break;
case 30:
this.$="booleano";
break;
case 31:
this.$= "char";
break;
case 32:
this.$= "string";
break;
case 33:
  addVariables($$[$0-2]); concatenarlista($$[$0]); this.$=getLVariables();
break;
case 34:
addVariables($$[$0]); this.$=getLVariables();
break;
case 35: case 36: case 38: case 39: case 40: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 80: case 81: case 82: case 83: case 84: case 108: case 109: case 122:
this.$=$$[$0];
break;
case 37: case 85:
 addError('Error sint√°ctico', 'No se reconoce' + $$[$0], this._$.first_line, this._$.first_column);
break;
case 41:
this.$= new Oid($$[$0], "id", _$[$0].first_line, _$[$0].first_column, "id"); 
break;
case 42:
this.$= new Dato($$[$0], "char", _$[$0].first_line, _$[$0].first_column);
break;
case 43:
this.$= new Dato($$[$0], "string", _$[$0].first_line, _$[$0].first_column);
break;
case 44:
this.$= new Dato($$[$0], "booleano", _$[$0].first_line, _$[$0].first_column);
break;
case 45:
this.$= new Dato($$[$0], "double", _$[$0].first_line, _$[$0].first_column);
break;
case 46:
this.$= new Dato($$[$0], "int", _$[$0].first_line, _$[$0].first_column);
break;
case 58:
this.$= new Aritmetica($$[$0], $$[$0] , $$[$0-1] + "unario", _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 59: case 60: case 61: case 62: case 64:
this.$= new Aritmetica($$[$0-2],$$[$0],$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) ;
break;
case 63:
this.$= new Aritmetica($$[$0-3],$$[$0-1],$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column) ;
break;
case 65: case 91: case 92:
this.$= $$[$0];
break;
case 66: case 67: case 68: case 69: case 70: case 71:
this.$= new Relacional($$[$0-2],$$[$0],$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$= new Logico($$[$0], $$[$0] ,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73: case 74:
this.$= new Logico($$[$0-2], $$[$0] ,$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$=$$[$0-4] +" "+ $$[$0-3] +" "+ $$[$0-2] +$$[$0-1] + " " + $$[$0];
break;
case 76:
this.$= $$[$0-1];
break;
case 77:
this.$=new Castear($$[$0],$$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 78:
 this.$= new IncrementoDecremento2($$[$0-1],"++", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1].tipoid, $$[$0-1].id); 
break;
case 79:
 this.$= new IncrementoDecremento2($$[$0-1],"--", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1].tipoid, $$[$0-1].id); 
break;
case 86:
this.$= new If($$[$0-4], $$[$0-1], $$[$0] ,_$[$0-6].first_line, _$[$0-6].first_column); limpiarElSEIF();
break;
case 89: case 106: case 120:
this.$= new BBreak(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 90: case 107: case 121:
this.$= new Continu(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 93:
this.$=[$$[$0]];
break;
case 94:
addELSEif(new elseif($$[$0-4], $$[$0-1], $$[$0] , _$[$0-8].first_line, _$[$0-8].first_column)); this.$= getElSEIF();
break;
case 95:
this.$= [new soloelse($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column)];
break;
case 96:
this.$=new Switchh($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); limpiarlistCasos();
break;
case 97:
 addCasos($$[$0]); this.$=getCasos();
break;
case 98:
 addCasos($$[$0-1]); concatenarlistaCasos($$[$0]); this.$=getCasos();
break;
case 99:
this.$= new Scasos($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 100:
this.$= new Sdefault($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$= new Bwhile($$[$0-4], $$[$0-1],  _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 102:
this.$= new BFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1],  _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 103:
this.$= new Bdowhile($$[$0-6], $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 110: case 114:
this.$=$$[$0-1] + $$[$0];
break;
case 111:
this.$=$$[$0-2] + " " + $$[$0-1] + " "+ $$[$0];
break;
case 112:
this.$=$$[$0-5] + " "+ $$[$0-4] + " " + $$[$0-3] +$$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 113:
this.$=$$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
case 115:
this.$=$$[$0-1]+ $$[$0];
break;
case 116:
this.$=$$[$0-3] + " " +  $$[$0-2] +" " + $$[$0-1] + " "  +  $$[$0];
break;
case 117:
this.$=$$[$0-5] + " " + $$[$0-4] + " "+$$[$0-3] + $$[$0-2] + " " + $$[$0-1]+ " " + $$[$0];
break;
case 123:
this.$=$$[$0-1] + " " + $$[$0];
break;
case 124:
this.$= new Print($$[$0-3], "salto", _$[$0-5].first_line, _$[$0-5].first_column) ;
break;
case 125:
this.$= new Print($$[$0-1], "sinsalto", _$[$0-3].first_line, _$[$0-3].first_column) ;
break;
case 126:
this.$= new Ftolower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 127:
this.$= new Ftoupper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 128:
this.$= new Fround($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 129:
this.$=new Flength($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 130:
this.$=new Ftypeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 131:
this.$=new Ftostring($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 132:
this.$=$$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 133:
this.$=$$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,90:$V8,95:$V9,97:$Va,98:$Vb,103:$Vc,106:$Vd,117:$Ve},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,90:$V8,95:$V9,97:$Va,98:$Vb,103:$Vc,106:$Vd,117:$Ve},o($Vf,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),{13:[1,36]},o($Vg,[2,10]),o($Vg,[2,11]),{17:37,20:[1,38]},{18:[1,39]},{18:$Vh,21:$Vi,22:$Vj,30:$Vk,60:$Vl,101:42},o($Vg,[2,85],{13:$Vm}),o($Vg,[2,80]),o($Vg,[2,81]),o($Vg,[2,82]),o($Vg,[2,83]),o($Vg,[2,84]),{20:[1,46]},{107:[1,47]},{20:[1,48]},o($Vn,[2,28]),o($Vn,[2,29]),o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,32]),{60:[1,49]},{60:[1,50]},{81:[1,51]},{60:[1,52]},{60:[1,53]},{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,9]),{13:$Vo,18:$Vp,23:[1,54]},o($Vq,$Vh,{101:57,30:$Vk,60:$Vl}),{2:$Vr,12:74,19:58,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{13:[1,92]},{13:[1,93]},o($VH,[2,123]),{17:94,20:$VI},{16:98,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,61:[1,97],102:96},o($VJ,[2,17]),{60:$Vl,101:99},{2:$Vr,12:74,19:100,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{60:$Vl,101:101},{20:$VK,26:102,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:106,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,90:$V8,95:$V9,96:107,97:$Va,98:$Vb,99:108,100:$VO,103:$Vc,106:$Vd,117:$Ve},{20:$VK,26:114,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{2:[1,118],8:115,16:116,17:13,20:[1,117],31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{24:[1,119]},o($VJ,[2,12]),{2:$Vr,12:74,19:120,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{81:[1,121]},{13:[1,122]},o($VH,[2,35],{21:$VP,22:$VQ,55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11,112:[1,138]}),o($VH,[2,36]),o($VH,[2,37]),o($V21,[2,38]),o($V31,$V41,{73:[1,139]}),o($V21,[2,40]),o($V31,$V51,{101:42,60:$Vl}),o($V21,[2,42]),o($V21,[2,43]),o($V21,[2,44]),o($V21,[2,45]),o($V21,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55]),o($VH,[2,56]),o($VH,[2,57]),{20:$VK,26:140,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{60:[1,141]},o($V21,[2,65]),{20:$VK,26:142,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{16:143,20:$VK,26:144,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{60:[1,145]},{60:[1,146]},{60:[1,147]},{60:[1,148]},{60:[1,149]},o($VJ,[2,15]),o($VJ,[2,16]),o($Vq,[2,33]),o($Vq,$Vh,{30:$Vk}),{61:[1,150]},o($V61,[2,114]),{20:$VK,26:151,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{81:[1,152]},{13:[1,154],107:[1,153]},{13:[1,155]},{55:$VR,56:$VS,57:$VT,58:$VU,61:[1,156],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},o($V21,$V41),o($V21,$V51),{20:$VK,26:144,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{55:$VR,56:$VS,57:$VT,58:$VU,61:[1,157],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,88:[1,158],90:$V8,95:$V9,97:$Va,98:$Vb,99:159,100:$VO,103:$Vc,106:$Vd,117:$Ve},o($V71,[2,105]),{13:[1,160]},{13:[1,161]},o($V71,[2,108]),o($V71,[2,109]),{2:$Vr,12:74,13:[1,162],19:163,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{55:$VR,56:$VS,57:$VT,58:$VU,61:[1,164],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{20:$VK,26:165,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{17:166,20:$VI},{18:$Vh,21:$Vi,22:$Vj,30:$Vk},{13:$Vm},{18:[1,167],23:[1,168]},{13:[1,169]},{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,90:$V8,95:$V9,96:170,97:$Va,98:$Vb,99:108,100:$VO,103:$Vc,106:$Vd,117:$Ve},o($VJ,[2,14]),{20:$VK,26:171,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:172,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:173,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:174,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:175,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:176,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:177,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:178,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:179,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:180,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:181,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:182,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{20:$VK,26:183,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},o($VH,[2,78]),o($VH,[2,79]),{113:[1,184],116:[1,185]},{2:$Vr,12:74,19:186,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},o($V21,[2,58]),{20:$VK,26:187,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},o($V81,[2,72],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$}),{61:[1,188]},{55:$VR,56:$VS,57:$VT,58:$VU,61:[1,189],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{2:$Vr,12:74,19:190,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{2:$Vr,12:74,19:191,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{2:$Vr,12:74,19:192,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{2:$Vr,12:74,19:193,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{2:$Vr,12:74,19:194,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},o($V61,[2,113]),{30:[1,195],55:$VR,56:$VS,57:$VT,58:$VU,61:[2,115],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{2:$V0,6:200,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$V91,86:$Va1,90:$V8,95:$V9,97:$Va,98:$Vb,103:$Vc,104:196,105:197,106:$Vd,117:$Ve},{108:[1,201]},o($Vg,[2,125]),o($Vg,[2,133]),{81:[1,202]},{81:[1,203]},{95:[1,204]},o($V71,[2,104]),o($V71,[2,106]),o($V71,[2,107]),o($Vb1,[2,110]),{13:[1,205]},{81:[1,206]},{13:[1,207],55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{13:$Vo,18:$Vp},{23:[1,209],25:[1,208]},{24:[1,210]},o($VJ,[2,13]),{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,88:[1,211],90:$V8,95:$V9,97:$Va,98:$Vb,99:159,100:$VO,103:$Vc,106:$Vd,117:$Ve},o($Vc1,[2,59],{57:$VT,58:$VU,62:$VV}),o($Vc1,[2,60],{57:$VT,58:$VU,62:$VV}),o($V21,[2,61]),o($V21,[2,62]),o($V21,[2,64]),o($Vd1,[2,66],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,66:$VY,67:$VZ,68:$V_,69:$V$}),o($Vd1,[2,67],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,66:$VY,67:$VZ,68:$V_,69:$V$}),o($Ve1,[2,68],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV}),o($Ve1,[2,69],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV}),o($Ve1,[2,70],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV}),o($Ve1,[2,71],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV}),o($V81,[2,73],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$}),o([13,21,22,24,30,61,72,73,74,107,112],[2,74],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01}),{60:[1,212]},{60:[1,213]},{74:[1,214]},{30:[1,215],55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{20:$VK,26:216,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},o($V21,[2,76]),{61:[1,217]},{61:[1,218]},{61:[1,219]},{61:[1,220]},{61:[1,221]},{16:98,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,102:222},{2:$V0,6:200,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$V91,86:$Va1,88:[1,223],90:$V8,95:$V9,97:$Va,98:$Vb,103:$Vc,105:224,106:$Vd,117:$Ve},o($Vf1,[2,119]),{13:[1,225]},{13:[1,226]},o($Vf1,[2,122]),{13:[1,227]},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,82:228,84:229,85:$Vg1,86:$Vh1,87:232,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},{91:234,92:235,93:$Vi1,94:$Vj1},{60:[1,238]},o($Vb1,[2,111]),{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,90:$V8,95:$V9,96:239,97:$Va,98:$Vb,99:108,100:$VO,103:$Vc,106:$Vd,117:$Ve},{20:$VK,26:241,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,47:240,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{16:242,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{20:$VK,26:244,27:243,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{18:[1,245]},o($Vg,[2,112]),{61:[1,246]},{61:[1,247]},{2:$Vr,12:74,19:248,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{20:$VK,26:249,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},o($VH,[2,77],{55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11}),o($VH,[2,126]),o($VH,[2,127]),o($VH,[2,128]),o($VH,[2,130]),o($VH,[2,131]),{61:[2,116]},o($Vg,[2,117]),o($Vf1,[2,118]),o($Vf1,[2,120]),o($Vf1,[2,121]),o($Vg,[2,124]),{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,83:250,84:251,85:$Vg1,86:$Vh1,87:232,88:$Vk1,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},o($Vb1,[2,88]),{13:[1,253]},{13:[1,254]},o($Vb1,[2,91]),o($Vb1,[2,92]),{88:[1,255]},{88:[2,97],91:256,92:235,93:$Vi1,94:$Vj1},{2:$Vr,12:74,19:257,20:$Vs,26:59,36:60,37:62,38:63,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:71,46:72,47:73,48:75,49:76,50:77,51:78,52:79,53:80,54:81,55:$Vy,59:$Vz,60:$VA,63:84,70:$VB,109:$VC,110:$VD,111:$VE,114:$VF,115:$VG},{74:[1,258]},{20:$VK,26:259,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,88:[1,260],90:$V8,95:$V9,97:$Va,98:$Vb,99:159,100:$VO,103:$Vc,106:$Vd,117:$Ve},{61:[1,261]},{21:$VP,22:$VQ,55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{23:[1,262]},{24:[1,263]},{24:[2,27],30:[1,264],55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{23:[1,266],25:[1,265]},o($VH,[2,129]),o($VH,[2,132]),o($VH,[2,75]),{55:$VR,56:$VS,57:$VT,58:$VU,61:[1,267],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},o($Vg,[2,86]),o($Vb1,[2,87]),o($Vg,[2,93],{89:[1,268]}),o($Vb1,[2,89]),o($Vb1,[2,90]),o($Vg,[2,96]),{88:[2,98]},{74:[1,269]},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,82:270,84:229,85:$Vg1,86:$Vh1,87:232,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},{55:$VR,56:$VS,57:$VT,58:$VU,61:[1,271],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},o($Vg,[2,101]),{81:[1,272]},{20:$VK,26:273,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{13:[1,274]},{20:$VK,26:244,27:275,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{16:276,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{23:$Vl1,28:277},o($V21,[2,63]),{80:[1,279],81:[1,280]},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,82:281,84:229,85:$Vg1,86:$Vh1,87:232,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},o($Vm1,[2,100],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,75:16,76:17,77:18,78:19,79:20,87:232,6:233,84:251,2:$V0,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,80:$V7,85:$Vg1,86:$Vh1,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve}),{13:[1,282]},{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,90:$V8,95:$V9,96:283,97:$Va,98:$Vb,99:108,100:$VO,103:$Vc,106:$Vd,117:$Ve},{24:[1,284],55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},o($Vg,[2,19]),{24:[2,26]},{23:[1,285]},{24:[1,286]},{20:$VK,26:288,29:287,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{60:[1,289]},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,82:290,84:229,85:$Vg1,86:$Vh1,87:232,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},o($Vm1,[2,99],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,75:16,76:17,77:18,78:19,79:20,87:232,6:233,84:251,2:$V0,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,80:$V7,85:$Vg1,86:$Vh1,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve}),o($Vg,[2,103]),{2:$V0,6:112,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,85:$VM,86:$VN,87:111,88:[1,291],90:$V8,95:$V9,97:$Va,98:$Vb,99:159,100:$VO,103:$Vc,106:$Vd,117:$Ve},{13:[1,292]},{20:$VK,26:293,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{13:[1,294]},{24:[1,295]},{24:[2,25],30:[1,296],55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{20:$VK,26:297,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,84:251,85:$Vg1,86:$Vh1,87:232,88:[1,298],90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},o($Vg,[2,102]),o($Vg,[2,18]),{24:[1,299],55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},o($Vg,[2,21]),{24:[2,23],30:[1,300]},{20:$VK,26:288,29:301,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{55:$VR,56:$VS,57:$VT,58:$VU,61:[1,302],62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},o($Vg,[2,95]),{23:[1,303]},{23:$Vl1,28:304},{24:[2,24]},{81:[1,305]},{20:$VK,26:306,37:62,38:103,39:64,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,55:$Vy,59:$Vz,60:$VL,63:84,70:$VB},{24:[2,22]},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,82:307,84:229,85:$Vg1,86:$Vh1,87:232,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},{24:[1,308],55:$VR,56:$VS,57:$VT,58:$VU,62:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,71:$V01,72:$V11},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,75:16,76:17,77:18,78:19,79:20,80:$V7,83:309,84:251,85:$Vg1,86:$Vh1,87:232,88:$Vk1,90:$V8,95:$V9,97:$Va,98:$Vb,100:$VO,103:$Vc,106:$Vd,117:$Ve},{13:[1,310]},o($Vg,[2,94]),o($Vg,[2,20])],
defaultActions: {34:[2,1],222:[2,116],256:[2,98],275:[2,26],301:[2,24],304:[2,22]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const {addError} = require("../analisisSem/manejoErrores");
const Dato = require("../interprete/expresion/Dato.js");
const Print = require("../interprete/instruccion/Print.js");
const Aritmetica = require("../interprete/expresion/Aritmetica.js");
const IncrementoDecremento = require("../interprete/expresion/IncrementoDecremento.js");
const IncrementoDecremento2 = require("../interprete/expresion/IncrementoDecremento2.js");
const Relacional = require("../interprete/expresion/Relacional.js");
const Asignacion = require("../interprete/instruccion/Asignacion.js");
const Reasignacion = require("../interprete/instruccion/Reasignacion.js");
const Logico = require("../interprete/expresion/Logicos.js");
const If = require("../interprete/instruccion/If.js");
const Bwhile = require("../interprete/instruccion/Bwhile.js");
const BBreak = require("../interprete/instruccion/BBreak.js");
const Castear = require("../interprete/otrasexpresiones/Castear.js"); 
const Ftolower = require("../interprete/otrasexpresiones/Ftolower.js"); 
const Ftoupper = require("../interprete/otrasexpresiones/Ftoupper.js"); 
const Flength = require("../interprete/otrasexpresiones/Flength.js"); 
const Fround = require("../interprete/otrasexpresiones/Fround.js"); 
const Ftypeof = require("../interprete/otrasexpresiones/Ftypeof.js"); 
const Ftostring = require("../interprete/otrasexpresiones/Ftostring.js"); 
const {addVariables, limpiarlistVariables, getLVariables, concatenarlista , addELSEif, getElSEIF, limpiarElSEIF, addCasos, getCasos, concatenarlistaCasos, limpiarlistCasos, addExp, getExp, concatenarlistaExp, limpiarlistExp, addLSMA, getLSMA, concatenarLSMA, limpiarLSMA} = require("../interprete/instruccion/listId.js");
const Oid = require("../interprete/expresion/Oid.js");
const Bdowhile = require("../interprete/instruccion/Bdowhile.js");
const Continu = require("../interprete/instruccion/Continu.js");
const elseif = require("../interprete/instruccion/elseif.js");
const soloelse = require("../interprete/instruccion/soloelse.js");
const Switchh = require("../interprete/instruccion/Switchh.js");
const Scasos = require("../interprete/instruccion/Scasos.js");
const Sdefault = require("../interprete/instruccion/Sdefault.js");
const BFor = require("../interprete/instruccion/BFor.js"); 
const AsignacionV = require("../interprete/instruccion/AsignacionV.js");
const AsignacionV2 = require("../interprete/instruccion/AsignacionV2.js");
const AsignacionVT = require("../interprete/instruccion/AsignacionVT.js");
const AsignacionV2T = require("../interprete/instruccion/AsignacionV2T.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2://comentario vlineas
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 56;
break;
case 6:return 55;
break;
case 7:return 58;
break;
case 8:return 57;
break;
case 9:return 62;
break;
case 10:return 65;
break;
case 11:return 70;
break;
case 12:return 60;
break;
case 13:return 61;
break;
case 14:return 81;
break;
case 15:return 88;
break;
case 16:return 23;
break;
case 17:return 24;
break;
case 18:return 30;
break;
case 19:return 13;
break;
case 20:return 64;
break;
case 21:return 18;
break;
case 22:return 112;
break;
case 23:return 73;
break;
case 24:return 74;
break;
case 25:return 66;
break;
case 26:return 68;
break;
case 27:return 107;
break;
case 28:return 67;
break;
case 29:return 69;
break;
case 30:return 72;
break;
case 31:return 71;
break;
case 32:return 31;
break;
case 33:return 32;
break;
case 34:return 33;
break;
case 35:return 34;
break;
case 36:return 35;
break;
case 37:return 59;
break;
case 38:return 25;
break;
case 39:return 80;
break;
case 40:return 89;
break;
case 41:return 90;
break;
case 42:return 93;
break;
case 43:return 94;
break;
case 44:return 95;
break;
case 45:return 97;
break;
case 46:return 98;
break;
case 47:return 85;
break;
case 48:return 86;
break;
case 49:return 100;
break;
case 50:return 103;
break;
case 51:return 106;
break;
case 52:return 108;
break;
case 53:return 109;
break;
case 54:return 110;
break;
case 55:return 111;
break;
case 56:return 113;
break;
case 57:return 114;
break;
case 58:return 115;
break;
case 59:return 116;
break;
case 60:return 117;
break;
case 61:return 42;
break;
case 62:return 43;
break;
case 63:return 44;
break;
case 64:return 20;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 40;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 41; 
break;
case 67:return 5;
break;
case 68:addError('Error l√©xico', 'Caracter no reconocido\" ' + yy_.yytext +' \" ', yy_.yylloc.first_line, yy_.yylloc.first_column); console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?::)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}