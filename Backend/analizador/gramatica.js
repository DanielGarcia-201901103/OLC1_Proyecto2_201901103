/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,13],$V2=[1,24],$V3=[1,25],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,32],$Va=[1,33],$Vb=[1,31],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[2,5,20,31,32,33,34,35,81,91,96,98,99,104,107,118],$Vg=[2,5,20,31,32,33,34,35,81,86,87,89,91,94,95,96,98,99,101,104,107,118],$Vh=[2,36],$Vi=[1,40],$Vj=[1,41],$Vk=[1,43],$Vl=[1,44],$Vm=[1,46],$Vn=[20,23,41,42,43,44,45,56,60,61,62,71],$Vo=[1,57],$Vp=[1,58],$Vq=[13,18,23],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,75],$VA=[1,74],$VB=[13,62,75,108],$VC=[1,79],$VD=[1,86],$VE=[1,88],$VF=[1,100],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[1,104],$VK=[1,105],$VL=[2,5,20,31,32,33,34,35,41,42,43,44,45,56,60,61,71,81,86,87,89,91,94,95,96,98,99,101,104,107,118],$VM=[1,113],$VN=[1,114],$VO=[1,117],$VP=[1,128],$VQ=[1,127],$VR=[1,129],$VS=[1,130],$VT=[1,131],$VU=[1,132],$VV=[1,133],$VW=[1,134],$VX=[1,135],$VY=[1,136],$VZ=[1,137],$V_=[1,138],$V$=[1,139],$V01=[13,21,22,24,30,56,57,58,59,62,63,65,66,67,68,69,70,72,73,74,75,108,113],$V11=[2,41],$V21=[2,44],$V31=[1,140],$V41=[13,62,75,82,108],$V51=[1,148],$V61=[1,149],$V71=[13,21,22,56,57,58,59,62,63,65,66,67,68,69,70,72,73,75,108,113],$V81=[2,20,31,32,33,34,35,81,86,87,89,91,96,98,99,101,104,107,118],$V91=[13,21,22,24,30,62,72,73,74,75,108,113],$Va1=[2,20,31,32,33,34,35,81,86,87,89,91,94,95,96,98,99,101,104,107,118],$Vb1=[13,21,22,24,30,56,57,62,65,66,67,68,69,70,72,73,74,75,108,113],$Vc1=[13,21,22,24,30,62,65,66,72,73,74,75,108,113],$Vd1=[13,21,22,24,30,62,65,66,67,68,69,70,72,73,74,75,108,113],$Ve1=[2,20,31,32,33,34,35,81,89,91,96,98,99,101,104,107,118],$Vf1=[1,238],$Vg1=[1,239],$Vh1=[1,244],$Vi1=[1,245],$Vj1=[1,263],$Vk1=[1,291],$Vl1=[89,94,95];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CODIGO":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONESARR":7,"DECLARACIONES":8,"SENTENCIAS":9,"FUNCIONES":10,"METODOS":11,"LLAMADAS":12,"sigpuntoycoma":13,"FCOUT":14,"FEXECUTE":15,"TIPODATO":16,"LISTANVARIABLES":17,"sigigual":18,"ASIGNACIONES":19,"id":20,"sigincremento":21,"sigdecremento":22,"corcheteabre":23,"corchetecierra":24,"resnew":25,"EXPRESIONES":26,"LISTANEXPR":27,"LISTASFILAS":28,"LISTANEXP":29,"signocoma":30,"resint":31,"resdouble":32,"resbool":33,"reschar":34,"resstring":35,"OTRASEXPRESIONES":36,"OPERACIONES":37,"OPERACIONESRELACIONAL":38,"OPERADORESLOGICOS":39,"ACCESOVEC":40,"caracter":41,"cadena":42,"bool":43,"decimal":44,"numero":45,"CASTEAR":46,"OPERADORTERNARIO":47,"INCREYDECRE":48,"FTOLOWER":49,"FTOUPPER":50,"FROUND":51,"FLENGTH":52,"FTYPEOF":53,"FTOSTRING":54,"FCSTR":55,"menos":56,"mas":57,"por":58,"dividir":59,"respotencia":60,"parentesisabre":61,"parentesiscierra":62,"modulo":63,"AGRUPACION":64,"igualigual":65,"negacionigual":66,"menorigual":67,"menorque":68,"mayorigual":69,"mayorque":70,"notlogico":71,"andlogico":72,"orlogico":73,"siginterrogacion":74,"dospuntos":75,"SENTIF":76,"SENTSWITCH":77,"SENTDOWHILE":78,"SENTWHILE":79,"SENTFOR":80,"resif":81,"llaveabre":82,"CONTENIDOS":83,"FINIF":84,"CONTEIF":85,"resbreak":86,"rescontinue":87,"RETORNOS":88,"llavecierra":89,"reselse":90,"resswitch":91,"SWCASOS":92,"SWCASE":93,"rescase":94,"resdefault":95,"reswhile":96,"CONTENIDOSCICLOS":97,"resfor":98,"resdo":99,"CONTENIDOCICL":100,"resreturn":101,"SNPARAMETROS":102,"PARAMETROS":103,"resvoid":104,"CONTENIDOSMETOD":105,"CONTMETOD":106,"rescout":107,"menormenor":108,"resendl":109,"restolower":110,"restoupper":111,"resround":112,"sigpunto":113,"reslength":114,"restypeof":115,"restostring":116,"rescstr":117,"resexecute":118,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"sigpuntoycoma",18:"sigigual",20:"id",21:"sigincremento",22:"sigdecremento",23:"corcheteabre",24:"corchetecierra",25:"resnew",30:"signocoma",31:"resint",32:"resdouble",33:"resbool",34:"reschar",35:"resstring",41:"caracter",42:"cadena",43:"bool",44:"decimal",45:"numero",56:"menos",57:"mas",58:"por",59:"dividir",60:"respotencia",61:"parentesisabre",62:"parentesiscierra",63:"modulo",65:"igualigual",66:"negacionigual",67:"menorigual",68:"menorque",69:"mayorigual",70:"mayorque",71:"notlogico",72:"andlogico",73:"orlogico",74:"siginterrogacion",75:"dospuntos",81:"resif",82:"llaveabre",86:"resbreak",87:"rescontinue",89:"llavecierra",90:"reselse",91:"resswitch",94:"rescase",95:"resdefault",96:"reswhile",98:"resfor",99:"resdo",101:"resreturn",104:"resvoid",107:"rescout",108:"menormenor",109:"resendl",110:"restolower",111:"restoupper",112:"resround",113:"sigpunto",114:"reslength",115:"restypeof",116:"restostring",117:"rescstr",118:"resexecute"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[8,3],[8,5],[8,4],[8,3],[8,3],[8,2],[7,11],[7,9],[7,16],[7,11],[7,7],[7,10],[28,5],[28,3],[29,3],[29,1],[27,3],[27,1],[16,1],[16,1],[16,1],[16,1],[16,1],[17,3],[17,1],[19,1],[19,1],[19,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[40,7],[40,4],[37,2],[37,3],[37,3],[37,3],[37,3],[37,6],[37,3],[37,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[39,2],[39,3],[39,3],[47,5],[64,3],[46,4],[48,2],[48,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[76,7],[83,2],[83,1],[85,2],[85,2],[85,1],[85,1],[84,1],[84,9],[84,5],[77,7],[92,1],[92,2],[93,4],[93,3],[79,7],[80,10],[78,9],[97,2],[97,1],[100,2],[100,2],[100,1],[100,1],[88,2],[88,3],[10,6],[102,3],[102,2],[103,2],[103,4],[11,6],[105,2],[105,1],[106,1],[106,1],[12,2],[14,6],[14,4],[49,4],[50,4],[51,4],[52,5],[53,4],[54,4],[55,5],[15,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2: case 92: case 109: case 123:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 93: case 110: case 124:
 this.$ = []; this.$.push($$[$0]);
break;
case 4: case 5:
console.log($$[$0]);this.$=$$[$0];
break;
case 6: case 7: case 8: case 10: case 11:
console.log($$[$0]); this.$=$$[$0];
break;
case 9:
console.log($$[$0-1]); this.$=$$[$0-1];
break;
case 12:
 this.$= new Asignacion($$[$0-1], new Dato("sindato", $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column), $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); limpiarlistVariables();
break;
case 13:
 this.$= new Asignacion($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); limpiarlistVariables();
break;
case 14:
 this.$= new Reasignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); limpiarlistVariables();
break;
case 15:
 this.$= new IncrementoDecremento($$[$0-2],new Oid($$[$0-2], "id", _$[$0-2].first_line, _$[$0-2].first_column, "id"),"++", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 16:
 this.$= new IncrementoDecremento($$[$0-2],new Oid($$[$0-2], "id", _$[$0-2].first_line, _$[$0-2].first_column, "id"),"--", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 17:
 addError('Error sint√°ctico', 'No se reconoce' + $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 18:
 this.$= new AsignacionV($$[$0-10], $$[$0-9], $$[$0-4], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column);  limpiarlistVariables();
break;
case 19:
 this.$= new AsignacionVT($$[$0-8], $$[$0-7], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);  limpiarlistVariables(); limpiarlistExp();
break;
case 20:
 this.$= new AsignacionV2($$[$0-15], $$[$0-14], $$[$0-7], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column);  limpiarlistVariables();
break;
case 21:
 this.$= new AsignacionV2T($$[$0-10], $$[$0-9], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column);  limpiarLSMA();
break;
case 22:
 this.$= new ModifV($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 23:
 this.$= new ModifV2($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 24:
 addLSMA($$[$0-3]); concatenarLSMA($$[$0]); this.$=getLSMA(); 
break;
case 25:
 addLSMA($$[$0-1]); this.$=getLSMA(); 
break;
case 26:
  addExp($$[$0-2]); concatenarlistaExp($$[$0]); this.$=getExp(); limpiarlistExp();
break;
case 27:
  addExp($$[$0]); this.$=getExp(); 
break;
case 28:
  addExp($$[$0-2]); concatenarlistaExp($$[$0]); this.$=getExp();
break;
case 29:
  addExp($$[$0]); this.$=getExp();
break;
case 30:
this.$="int";
break;
case 31:
this.$="double";
break;
case 32:
this.$="booleano";
break;
case 33:
this.$= "char";
break;
case 34:
this.$= "string";
break;
case 35:
 addVariables($$[$0-2]); concatenarlista($$[$0]); this.$=getLVariables();
break;
case 36:
 addVariables($$[$0]); this.$=getLVariables();
break;
case 37: case 38: case 40: case 41: case 42: case 43: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 85: case 86: case 87: case 88: case 89: case 113: case 114: case 125: case 126:
this.$=$$[$0];
break;
case 39: case 90:
 addError('Error sint√°ctico', 'No se reconoce' + $$[$0], this._$.first_line, this._$.first_column);
break;
case 44:
this.$= new Oid($$[$0], "id", _$[$0].first_line, _$[$0].first_column, "id"); 
break;
case 45:
this.$= new Dato($$[$0], "char", _$[$0].first_line, _$[$0].first_column);
break;
case 46:
this.$= new Dato($$[$0], "string", _$[$0].first_line, _$[$0].first_column);
break;
case 47:
this.$= new Dato($$[$0], "booleano", _$[$0].first_line, _$[$0].first_column);
break;
case 48:
this.$= new Dato($$[$0], "double", _$[$0].first_line, _$[$0].first_column);
break;
case 49:
this.$= new Dato($$[$0], "int", _$[$0].first_line, _$[$0].first_column);
break;
case 61:
this.$= new AccesoV2($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 62:
this.$= new AccesoV($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) ;
break;
case 63:
this.$= new Aritmetica($$[$0], $$[$0] , $$[$0-1] + "unario", _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 64: case 65: case 66: case 67: case 69:
this.$= new Aritmetica($$[$0-2],$$[$0],$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) ;
break;
case 68:
this.$= new Aritmetica($$[$0-3],$$[$0-1],$$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column) ;
break;
case 70: case 96: case 97:
this.$= $$[$0];
break;
case 71: case 72: case 73: case 74: case 75: case 76:
this.$= new Relacional($$[$0-2],$$[$0],$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$= new Logico($$[$0], $$[$0] ,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 78: case 79:
this.$= new Logico($$[$0-2], $$[$0] ,$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$=$$[$0-4] +" "+ $$[$0-3] +" "+ $$[$0-2] +$$[$0-1] + " " + $$[$0];
break;
case 81:
this.$= $$[$0-1];
break;
case 82:
this.$=new Castear($$[$0],$$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 83:
 this.$= new IncrementoDecremento2($$[$0-1],"++", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1].tipoid, $$[$0-1].id); 
break;
case 84:
 this.$= new IncrementoDecremento2($$[$0-1],"--", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1].tipoid, $$[$0-1].id); 
break;
case 91:
this.$= new If($$[$0-4], $$[$0-1], $$[$0] ,_$[$0-6].first_line, _$[$0-6].first_column); limpiarElSEIF();
break;
case 94: case 111:
this.$= new BBreak(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 95: case 112:
this.$= new Continu(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 98:
this.$=[$$[$0]];
break;
case 99:
addELSEif(new elseif($$[$0-4], $$[$0-1], $$[$0] , _$[$0-8].first_line, _$[$0-8].first_column)); this.$= getElSEIF();
break;
case 100:
this.$= [new soloelse($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column)];
break;
case 101:
this.$=new Switchh($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); limpiarlistCasos();
break;
case 102:
 addCasos($$[$0]); this.$=getCasos();
break;
case 103:
 addCasos($$[$0-1]); concatenarlistaCasos($$[$0]); this.$=getCasos();
break;
case 104:
this.$= new Scasos($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 105:
this.$= new Sdefault($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$= new Bwhile($$[$0-4], $$[$0-1],  _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 107:
this.$= new BFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1],  _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 108:
this.$= new Bdowhile($$[$0-6], $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 115:
this.$=$$[$0-1] + $$[$0];
break;
case 116:
this.$=$$[$0-2] + " " + $$[$0-1] + " "+ $$[$0];
break;
case 117:
this.$=$$[$0-5] + " "+ $$[$0-4] + " " + $$[$0-3] +$$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 118:
this.$=$$[$0-1];
break;
case 119:
this.$=[];
break;
case 120:
this.$=$$[$0-1]+ $$[$0];
break;
case 121:
this.$=$$[$0-3] + " " +  $$[$0-2] +" " + $$[$0-1] + " "  +  $$[$0];
break;
case 122:
this.$= new Metodos($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 127:
this.$= new LLamadasMet($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 128:
this.$= new Print($$[$0-3], "salto", _$[$0-5].first_line, _$[$0-5].first_column) ;
break;
case 129:
this.$= new Print($$[$0-1], "sinsalto", _$[$0-3].first_line, _$[$0-3].first_column) ;
break;
case 130:
this.$= new Ftolower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 131:
this.$= new Ftoupper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 132:
this.$= new Fround($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 133:
this.$=new Flength($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 134:
this.$=new Ftypeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 135:
this.$=new Ftostring($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 136:
this.$=$$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 137:
this.$=new Execute($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,91:$V8,96:$V9,98:$Va,99:$Vb,104:$Vc,107:$Vd,118:$Ve},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,91:$V8,96:$V9,98:$Va,99:$Vb,104:$Vc,107:$Vd,118:$Ve},o($Vf,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),{13:[1,36]},o($Vg,[2,10]),o($Vg,[2,11]),{17:37,20:[1,38]},{18:$Vh,21:$Vi,22:$Vj,23:[1,39],30:$Vk,61:$Vl,102:42},{18:[1,45]},o($Vg,[2,90],{13:$Vm}),o($Vg,[2,85]),o($Vg,[2,86]),o($Vg,[2,87]),o($Vg,[2,88]),o($Vg,[2,89]),{20:[1,47]},{108:[1,48]},{12:49,20:[1,50]},o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,32]),o($Vn,[2,33]),o($Vn,[2,34]),{61:[1,51]},{61:[1,52]},{82:[1,53]},{61:[1,54]},{61:[1,55]},{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,9]),{13:$Vo,18:$Vp,23:[1,56]},o($Vq,$Vh,{102:59,30:$Vk,61:$Vl}),{20:$Vr,26:60,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{13:[1,76]},{13:[1,77]},o($VB,[2,127]),{17:78,20:$VC},{16:82,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:[1,81],103:80},{2:$VD,12:92,19:83,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},o($VL,[2,17]),{61:$Vl,102:106},{2:$VD,12:92,19:107,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{13:[1,108]},{61:$Vl,102:42},{20:$Vr,26:109,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:110,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,91:$V8,96:$V9,97:111,98:$Va,99:$Vb,100:112,101:$VO,104:$Vc,107:$Vd,118:$Ve},{20:$Vr,26:118,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{2:[1,122],8:119,16:120,17:14,20:[1,121],31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{24:[1,123]},o($VL,[2,12]),{2:$VD,12:92,19:124,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{82:[1,125]},{24:[1,126],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($V01,[2,40]),o($V01,$V11),o($V01,[2,42]),o($V01,[2,43]),o($V01,$V21,{23:$V31}),o($V01,[2,45]),o($V01,[2,46]),o($V01,[2,47]),o($V01,[2,48]),o($V01,[2,49]),{20:$Vr,26:141,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{61:[1,142]},o($V01,[2,70]),{20:$Vr,26:143,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:144,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},o($VL,[2,15]),o($VL,[2,16]),o($Vq,[2,35]),o($Vq,$Vh,{30:$Vk}),{62:[1,145]},o($V41,[2,119]),{20:$Vr,26:146,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{13:[1,147]},o($VB,[2,37],{21:$V51,22:$V61,56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$,113:[1,150]}),o($VB,[2,38]),o($VB,[2,39]),o($V71,$V11,{74:[1,151]}),o($V71,$V21,{102:42,23:$V31,61:$Vl}),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),{16:152,20:$Vr,26:144,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{61:[1,153]},{61:[1,154]},{61:[1,155]},{61:[1,156]},{61:[1,157]},{82:[1,158]},{13:[1,160],108:[1,159]},o($Vg,[2,137]),{56:$VP,57:$VQ,58:$VR,59:$VS,62:[1,161],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{56:$VP,57:$VQ,58:$VR,59:$VS,62:[1,162],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,89:[1,163],91:$V8,96:$V9,98:$Va,99:$Vb,100:164,101:$VO,104:$Vc,107:$Vd,118:$Ve},o($V81,[2,110]),{13:[1,165]},{13:[1,166]},o($V81,[2,113]),o($V81,[2,114]),{2:$VD,12:92,13:[1,167],19:168,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{56:$VP,57:$VQ,58:$VR,59:$VS,62:[1,169],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{20:$Vr,26:170,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{17:171,20:$VC},{18:$Vh,21:$Vi,22:$Vj,30:$Vk},{13:$Vm},{18:[1,172],23:[1,173]},{13:[1,174]},{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,91:$V8,96:$V9,97:175,98:$Va,99:$Vb,100:112,101:$VO,104:$Vc,107:$Vd,118:$Ve},{18:[1,176],23:[1,177]},{20:$Vr,26:178,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:179,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:180,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:181,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:182,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:183,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:184,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:185,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:186,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:187,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:188,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:189,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:190,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:191,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},o($V01,[2,63]),{20:$Vr,26:192,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},o($V91,[2,77],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ}),{56:$VP,57:$VQ,58:$VR,59:$VS,62:[1,193],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($V41,[2,118]),{30:[1,194],56:$VP,57:$VQ,58:$VR,59:$VS,62:[2,120],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($VL,[2,14]),o($VB,[2,83]),o($VB,[2,84]),{114:[1,195],117:[1,196]},{2:$VD,12:92,19:197,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{62:[1,198]},{2:$VD,12:92,19:199,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{2:$VD,12:92,19:200,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{2:$VD,12:92,19:201,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{2:$VD,12:92,19:202,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{2:$VD,12:92,19:203,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{2:$V0,6:207,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,88:206,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,105:204,106:205,107:$Vd,118:$Ve},{109:[1,208]},o($Vg,[2,129]),{82:[1,209]},{82:[1,210]},{96:[1,211]},o($V81,[2,109]),o($V81,[2,111]),o($V81,[2,112]),o($Va1,[2,115]),{13:[1,212]},{82:[1,213]},{13:[1,214],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{13:$Vo,18:$Vp},{23:[1,216],25:[1,215]},{24:[1,217]},o($VL,[2,13]),{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,89:[1,218],91:$V8,96:$V9,98:$Va,99:$Vb,100:164,101:$VO,104:$Vc,107:$Vd,118:$Ve},{20:$Vr,26:219,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{20:$Vr,26:220,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},o($Vb1,[2,64],{58:$VR,59:$VS,63:$VT}),o($Vb1,[2,65],{58:$VR,59:$VS,63:$VT}),o($V01,[2,66]),o($V01,[2,67]),o($V01,[2,69]),o($Vc1,[2,71],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,67:$VW,68:$VX,69:$VY,70:$VZ}),o($Vc1,[2,72],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,67:$VW,68:$VX,69:$VY,70:$VZ}),o($Vd1,[2,73],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT}),o($Vd1,[2,74],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT}),o($Vd1,[2,75],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT}),o($Vd1,[2,76],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT}),o($V91,[2,78],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ}),o([13,21,22,24,30,62,73,74,75,108,113],[2,79],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_}),{24:[1,221],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{30:[1,222],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($V01,[2,81]),{16:82,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,103:223},{61:[1,224]},{61:[1,225]},{75:[1,226]},{20:$Vr,26:227,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{62:[1,228]},{62:[1,229]},{62:[1,230]},{62:[1,231]},{62:[1,232]},{2:$V0,6:207,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,88:206,89:[1,233],91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,106:234,107:$Vd,118:$Ve},o($Ve1,[2,124]),o($Ve1,[2,125]),o($Ve1,[2,126]),{13:[1,235]},{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,83:236,85:237,86:$Vf1,87:$Vg1,88:240,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},{92:242,93:243,94:$Vh1,95:$Vi1},{61:[1,246]},o($Va1,[2,116]),{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,91:$V8,96:$V9,97:247,98:$Va,99:$Vb,100:112,101:$VO,104:$Vc,107:$Vd,118:$Ve},{20:$Vr,26:249,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,48:248,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{16:250,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{20:$Vr,26:252,27:251,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{18:[1,253]},o($Vg,[2,117]),{13:[1,254],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{24:[1,255],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($V01,[2,62],{23:[1,256]}),{20:$Vr,26:257,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{62:[2,121]},{62:[1,258]},{62:[1,259]},{2:$VD,12:92,19:260,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},o($VB,[2,82],{56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$}),o($VB,[2,130]),o($VB,[2,131]),o($VB,[2,132]),o($VB,[2,134]),o($VB,[2,135]),o($Vg,[2,122]),o($Ve1,[2,123]),o($Vg,[2,128]),{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,84:261,85:262,86:$Vf1,87:$Vg1,88:240,89:$Vj1,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},o($Va1,[2,93]),{13:[1,264]},{13:[1,265]},o($Va1,[2,96]),o($Va1,[2,97]),{89:[1,266]},{89:[2,102],92:267,93:243,94:$Vh1,95:$Vi1},{2:$VD,12:92,19:268,20:$VE,26:84,36:85,37:61,38:87,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:89,47:90,48:91,49:93,50:94,51:95,52:96,53:97,54:98,55:99,56:$Vx,60:$Vy,61:$VF,64:73,71:$VA,110:$VG,111:$VH,112:$VI,115:$VJ,116:$VK},{75:[1,269]},{20:$Vr,26:270,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,89:[1,271],91:$V8,96:$V9,98:$Va,99:$Vb,100:164,101:$VO,104:$Vc,107:$Vd,118:$Ve},{62:[1,272]},{21:$V51,22:$V61,56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{23:[1,273]},{24:[1,274]},{24:[2,29],30:[1,275],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{23:[1,277],25:[1,276]},o($Vg,[2,22]),{18:[1,278]},{20:$Vr,26:279,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{56:$VP,57:$VQ,58:$VR,59:$VS,62:[1,280],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($VB,[2,133]),o($VB,[2,136]),o($VB,[2,80]),o($Vg,[2,91]),o($Va1,[2,92]),o($Vg,[2,98],{90:[1,281]}),o($Va1,[2,94]),o($Va1,[2,95]),o($Vg,[2,101]),{89:[2,103]},{75:[1,282]},{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,83:283,85:237,86:$Vf1,87:$Vg1,88:240,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},{56:$VP,57:$VQ,58:$VR,59:$VS,62:[1,284],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($Vg,[2,106]),{82:[1,285]},{20:$Vr,26:286,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{13:[1,287]},{20:$Vr,26:252,27:288,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{16:289,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{23:$Vk1,28:290},{20:$Vr,26:292,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{24:[1,293],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($V01,[2,68]),{81:[1,294],82:[1,295]},{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,83:296,85:237,86:$Vf1,87:$Vg1,88:240,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},o($Vl1,[2,105],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,76:16,77:17,78:18,79:19,80:20,88:240,6:241,85:262,2:$V0,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,81:$V7,86:$Vf1,87:$Vg1,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve}),{13:[1,297]},{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,91:$V8,96:$V9,97:298,98:$Va,99:$Vb,100:112,101:$VO,104:$Vc,107:$Vd,118:$Ve},{24:[1,299],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($Vg,[2,19]),{24:[2,28]},{23:[1,300]},{24:[1,301]},{20:$Vr,26:303,29:302,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{13:[1,304],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($V01,[2,61]),{61:[1,305]},{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,83:306,85:237,86:$Vf1,87:$Vg1,88:240,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},o($Vl1,[2,104],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,76:16,77:17,78:18,79:19,80:20,88:240,6:241,85:262,2:$V0,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,81:$V7,86:$Vf1,87:$Vg1,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve}),o($Vg,[2,108]),{2:$V0,6:116,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,86:$VM,87:$VN,88:115,89:[1,307],91:$V8,96:$V9,98:$Va,99:$Vb,100:164,101:$VO,104:$Vc,107:$Vd,118:$Ve},{13:[1,308]},{20:$Vr,26:309,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{13:[1,310]},{24:[1,311]},{24:[2,27],30:[1,312],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($Vg,[2,23]),{20:$Vr,26:313,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,85:262,86:$Vf1,87:$Vg1,88:240,89:[1,314],91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},o($Vg,[2,107]),o($Vg,[2,18]),{24:[1,315],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($Vg,[2,21]),{24:[2,25],30:[1,316]},{20:$Vr,26:303,29:317,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{56:$VP,57:$VQ,58:$VR,59:$VS,62:[1,318],63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},o($Vg,[2,100]),{23:[1,319]},{23:$Vk1,28:320},{24:[2,26]},{82:[1,321]},{20:$Vr,26:322,37:61,38:62,39:63,40:64,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,56:$Vx,60:$Vy,61:$Vz,64:73,71:$VA},{24:[2,24]},{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,83:323,85:237,86:$Vf1,87:$Vg1,88:240,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},{24:[1,324],56:$VP,57:$VQ,58:$VR,59:$VS,63:$VT,65:$VU,66:$VV,67:$VW,68:$VX,69:$VY,70:$VZ,72:$V_,73:$V$},{2:$V0,6:241,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:14,20:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,76:16,77:17,78:18,79:19,80:20,81:$V7,84:325,85:262,86:$Vf1,87:$Vg1,88:240,89:$Vj1,91:$V8,96:$V9,98:$Va,99:$Vb,101:$VO,104:$Vc,107:$Vd,118:$Ve},{13:[1,326]},o($Vg,[2,99]),o($Vg,[2,20])],
defaultActions: {34:[2,1],223:[2,121],267:[2,103],288:[2,28],317:[2,26],320:[2,24]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const {addError} = require("../analisisSem/manejoErrores");
const Dato = require("../interprete/expresion/Dato.js");
const Print = require("../interprete/instruccion/Print.js");
const Aritmetica = require("../interprete/expresion/Aritmetica.js");
const IncrementoDecremento = require("../interprete/expresion/IncrementoDecremento.js");
const IncrementoDecremento2 = require("../interprete/expresion/IncrementoDecremento2.js");
const Relacional = require("../interprete/expresion/Relacional.js");
const Asignacion = require("../interprete/instruccion/Asignacion.js");
const Reasignacion = require("../interprete/instruccion/Reasignacion.js");
const Logico = require("../interprete/expresion/Logicos.js");
const If = require("../interprete/instruccion/If.js");
const Bwhile = require("../interprete/instruccion/Bwhile.js");
const BBreak = require("../interprete/instruccion/BBreak.js");
const Castear = require("../interprete/otrasexpresiones/Castear.js"); 
const Ftolower = require("../interprete/otrasexpresiones/Ftolower.js"); 
const Ftoupper = require("../interprete/otrasexpresiones/Ftoupper.js"); 
const Flength = require("../interprete/otrasexpresiones/Flength.js"); 
const Fround = require("../interprete/otrasexpresiones/Fround.js"); 
const Ftypeof = require("../interprete/otrasexpresiones/Ftypeof.js"); 
const Ftostring = require("../interprete/otrasexpresiones/Ftostring.js"); 
const {addVariables, limpiarlistVariables, getLVariables, concatenarlista , addELSEif, getElSEIF, limpiarElSEIF, addCasos, getCasos, concatenarlistaCasos, limpiarlistCasos, addExp, getExp, concatenarlistaExp, limpiarlistExp, addLSMA, getLSMA, concatenarLSMA, limpiarLSMA} = require("../interprete/instruccion/listId.js");
const Oid = require("../interprete/expresion/Oid.js");
const Bdowhile = require("../interprete/instruccion/Bdowhile.js");
const Continu = require("../interprete/instruccion/Continu.js");
const elseif = require("../interprete/instruccion/elseif.js");
const soloelse = require("../interprete/instruccion/soloelse.js");
const Switchh = require("../interprete/instruccion/Switchh.js");
const Scasos = require("../interprete/instruccion/Scasos.js");
const Sdefault = require("../interprete/instruccion/Sdefault.js");
const BFor = require("../interprete/instruccion/BFor.js"); 
const AsignacionV = require("../interprete/instruccion/AsignacionV.js");
const AsignacionV2 = require("../interprete/instruccion/AsignacionV2.js");
const AsignacionVT = require("../interprete/instruccion/AsignacionVT.js");
const AsignacionV2T = require("../interprete/instruccion/AsignacionV2T.js");
const AccesoV = require("../interprete/instruccion/AccesoV.js");
const AccesoV2 = require("../interprete/instruccion/AccesoV2.js");
const ModifV = require("../interprete/instruccion/ModifV.js");
const ModifV2 = require("../interprete/instruccion/ModifV2.js");
const Metodos = require("../interprete/instruccion/Metodos.js");
const LLamadasMet = require("../interprete/instruccion/LLamadasMet.js");
const Execute = require("../interprete/instruccion/Execute.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2://comentario vlineas
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 57;
break;
case 6:return 56;
break;
case 7:return 59;
break;
case 8:return 58;
break;
case 9:return 63;
break;
case 10:return 66;
break;
case 11:return 71;
break;
case 12:return 61;
break;
case 13:return 62;
break;
case 14:return 82;
break;
case 15:return 89;
break;
case 16:return 23;
break;
case 17:return 24;
break;
case 18:return 30;
break;
case 19:return 13;
break;
case 20:return 65;
break;
case 21:return 18;
break;
case 22:return 113;
break;
case 23:return 74;
break;
case 24:return 75;
break;
case 25:return 67;
break;
case 26:return 69;
break;
case 27:return 108;
break;
case 28:return 68;
break;
case 29:return 70;
break;
case 30:return 73;
break;
case 31:return 72;
break;
case 32:return 31;
break;
case 33:return 32;
break;
case 34:return 33;
break;
case 35:return 34;
break;
case 36:return 35;
break;
case 37:return 60;
break;
case 38:return 25;
break;
case 39:return 81;
break;
case 40:return 90;
break;
case 41:return 91;
break;
case 42:return 94;
break;
case 43:return 95;
break;
case 44:return 96;
break;
case 45:return 98;
break;
case 46:return 99;
break;
case 47:return 86;
break;
case 48:return 87;
break;
case 49:return 101;
break;
case 50:return 104;
break;
case 51:return 107;
break;
case 52:return 109;
break;
case 53:return 110;
break;
case 54:return 111;
break;
case 55:return 112;
break;
case 56:return 114;
break;
case 57:return 115;
break;
case 58:return 116;
break;
case 59:return 117;
break;
case 60:return 118;
break;
case 61:return 43;
break;
case 62:return 44;
break;
case 63:return 45;
break;
case 64:return 20;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 41;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 42; 
break;
case 67:return 5;
break;
case 68:addError('Error l√©xico', 'Caracter no reconocido\" ' + yy_.yytext +' \" ', yy_.yylloc.first_line, yy_.yylloc.first_column); console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?::)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}