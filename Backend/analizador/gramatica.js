/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,13],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,32],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[2,5,19,22,23,24,25,26,73,80,82,85,86,87,89,90,94,96,107],$Vg=[2,22],$Vh=[1,39],$Vi=[1,40],$Vj=[1,42],$Vk=[1,43],$Vl=[19,33,34,35,36,37,48,52,53,54,63],$Vm=[12,17],$Vn=[1,73],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,85],$Vu=[1,86],$Vv=[1,79],$Vw=[1,88],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[12,54,67,97],$VD=[1,92],$VE=[2,5,19,22,23,24,25,26,33,34,35,36,37,48,52,53,63,73,80,82,85,86,87,89,90,94,96,107],$VF=[1,101],$VG=[1,102],$VH=[1,109],$VI=[1,110],$VJ=[1,113],$VK=[1,117],$VL=[1,118],$VM=[1,121],$VN=[1,120],$VO=[1,122],$VP=[1,123],$VQ=[1,124],$VR=[1,125],$VS=[1,126],$VT=[1,127],$VU=[1,128],$VV=[1,129],$VW=[1,130],$VX=[1,131],$VY=[1,132],$VZ=[12,20,21,27,48,49,50,51,54,55,57,58,59,60,61,62,64,65,66,67,97,102],$V_=[12,20,21,48,49,50,51,54,55,57,58,59,60,61,62,64,65,67,97,102],$V$=[2,27],$V01=[2,29],$V11=[12,54,67,74,97],$V21=[12,20,21,27,54,64,65,66,67,97,102],$V31=[80,85,86],$V41=[12,20,21,27,48,49,54,57,58,59,60,61,62,64,65,66,67,97,102],$V51=[12,20,21,27,54,57,58,64,65,66,67,97,102],$V61=[12,20,21,27,54,57,58,59,60,61,62,64,65,66,67,97,102],$V71=[1,214],$V81=[1,215],$V91=[1,220],$Va1=[1,221];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CODIGO":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"SENTENCIAS":8,"FUNCIONES":9,"METODOS":10,"LLAMADAS":11,"sigpuntoycoma":12,"FCOUT":13,"FEXECUTE":14,"TIPODATO":15,"LISTANVARIABLES":16,"sigigual":17,"ASIGNACIONES":18,"id":19,"sigincremento":20,"sigdecremento":21,"resint":22,"resdouble":23,"resbool":24,"reschar":25,"resstring":26,"signocoma":27,"OTRASEXPRESIONES":28,"EXPRESIONES":29,"OPERACIONES":30,"OPERACIONESRELACIONAL":31,"OPERADORESLOGICOS":32,"caracter":33,"cadena":34,"bool":35,"decimal":36,"numero":37,"CASTEAR":38,"OPERADORTERNARIO":39,"INCREYDECRE":40,"FTOLOWER":41,"FTOUPPER":42,"FROUND":43,"FLENGTH":44,"FTYPEOF":45,"FTOSTRING":46,"FCSTR":47,"menos":48,"mas":49,"por":50,"dividir":51,"respotencia":52,"parentesisabre":53,"parentesiscierra":54,"modulo":55,"AGRUPACION":56,"igualigual":57,"negacionigual":58,"menorigual":59,"menorque":60,"mayorigual":61,"mayorque":62,"notlogico":63,"andlogico":64,"orlogico":65,"siginterrogacion":66,"dospuntos":67,"SENTIF":68,"SENTSWITCH":69,"SENTWHILE":70,"SENTFOR":71,"SENTDOWHILE":72,"resif":73,"llaveabre":74,"CONTENIDOS":75,"FINIF":76,"resbreak":77,"rescontinue":78,"RETORNOS":79,"llavecierra":80,"reselse":81,"resswitch":82,"SWCASOS":83,"SWCASE":84,"rescase":85,"resdefault":86,"reswhile":87,"CONTENIDOSCICLOS":88,"resfor":89,"resdo":90,"resreturn":91,"SNPARAMETROS":92,"PARAMETROS":93,"resvoid":94,"CONTENIDOSMETOD":95,"rescout":96,"menormenor":97,"resendl":98,"restolower":99,"restoupper":100,"resround":101,"sigpunto":102,"reslength":103,"restypeof":104,"restostring":105,"rescstr":106,"resexecute":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"sigpuntoycoma",17:"sigigual",19:"id",20:"sigincremento",21:"sigdecremento",22:"resint",23:"resdouble",24:"resbool",25:"reschar",26:"resstring",27:"signocoma",33:"caracter",34:"cadena",35:"bool",36:"decimal",37:"numero",48:"menos",49:"mas",50:"por",51:"dividir",52:"respotencia",53:"parentesisabre",54:"parentesiscierra",55:"modulo",57:"igualigual",58:"negacionigual",59:"menorigual",60:"menorque",61:"mayorigual",62:"mayorque",63:"notlogico",64:"andlogico",65:"orlogico",66:"siginterrogacion",67:"dospuntos",73:"resif",74:"llaveabre",77:"resbreak",78:"rescontinue",80:"llavecierra",81:"reselse",82:"resswitch",85:"rescase",86:"resdefault",87:"reswhile",89:"resfor",90:"resdo",91:"resreturn",94:"resvoid",96:"rescout",97:"menormenor",98:"resendl",99:"restolower",100:"restoupper",101:"resround",102:"sigpunto",103:"reslength",104:"restypeof",105:"restostring",106:"rescstr",107:"resexecute"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,3],[7,5],[7,4],[7,3],[7,3],[7,2],[15,1],[15,1],[15,1],[15,1],[15,1],[16,1],[16,3],[18,1],[18,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,2],[30,3],[30,3],[30,3],[30,3],[30,6],[30,3],[30,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[32,2],[32,3],[32,3],[39,5],[56,3],[38,4],[40,2],[40,2],[8,1],[8,1],[8,1],[8,1],[8,1],[68,7],[75,2],[75,2],[75,1],[75,1],[76,1],[76,3],[76,5],[69,7],[83,1],[83,2],[84,4],[84,3],[70,7],[71,10],[72,9],[88,2],[88,2],[88,1],[88,1],[79,2],[79,3],[9,6],[92,3],[92,2],[93,2],[93,4],[10,6],[95,2],[95,2],[95,1],[11,2],[13,4],[13,6],[41,4],[42,4],[43,4],[44,5],[45,4],[46,4],[47,5],[14,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 this.$ = $$[$0-1]+ " " +$$[$0];
break;
case 3:
 this.$ = $$[$0];
break;
case 4:
console.log($$[$0]);this.$=$$[$0];
break;
case 5: case 6: case 7: case 9: case 10:
console.log($$[$0]); this.$=$$[$0];
break;
case 8:
console.log($$[$0-1]); this.$=$$[$0-1];
break;
case 11:
this.$=$$[$0-2] + " "+ $$[$0-1] + $$[$0];
break;
case 12:
this.$=$$[$0-4] + " "+ $$[$0-3] + $$[$0-2] + " "+$$[$0-1]+$$[$0];
break;
case 13:
 this.$=$$[$0-3] + " "+ $$[$0-2] + " "+ $$[$0-1] +$$[$0];
break;
case 14:
 this.$= $$[$0-2] + " "+ $$[$0-1] + " "+ $$[$0];
break;
case 15:
this.$=$$[$0-2] + " "+ $$[$0-1] + " "+ $$[$0];
break;
case 16:
addError('Error sint√°ctico', 'No se reconoce' + yytext, this._$.first_line, this._$.first_column);
break;
case 17: case 18: case 19: case 20: case 21: case 22: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 53: case 68: case 69: case 70: case 71: case 72: case 76: case 77: case 78: case 82: case 91: case 92: case 103:
this.$=$$[$0];
break;
case 23:
this.$=$$[$0-2] + " "+ $$[$0-1] + " " + $$[$0];
break;
case 46: case 66: case 67: case 74: case 75: case 89: case 90: case 93: case 97: case 101: case 102:
this.$=$$[$0-1] + $$[$0];
break;
case 47: case 48: case 49: case 50: case 52: case 54: case 55: case 56: case 57: case 58: case 59: case 61: case 62:
this.$=$$[$0-2] + " " + $$[$0-1] + " " + $$[$0] ;
break;
case 51:
this.$=$$[$0-5] + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] +" " + $$[$0-1] + $$[$0];
break;
case 60:
this.$=$$[$0-1] + " " + $$[$0] ;
break;
case 63:
this.$=$$[$0-4] +" "+ $$[$0-3] +" "+ $$[$0-2] +$$[$0-1] + " " + $$[$0];
break;
case 64: case 96:
this.$=$$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
case 65: case 84: case 107: case 108: case 109: case 111: case 112: case 114:
this.$=$$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
case 73:
this.$=$$[$0-6] +" "+ $$[$0-5] + $$[$0-4] +$$[$0-3] + $$[$0-2] + " " +$$[$0-1] + " " + $$[$0];
break;
case 79:
this.$=$$[$0-2] + $$[$0-1] +" " +$$[$0];
break;
case 80:
this.$=$$[$0-4] + $$[$0-3] +$$[$0-2] +" " + $$[$0-1] + " " + $$[$0];
break;
case 81:
this.$=$$[$0-6] +" "+$$[$0-5] + " " + $$[$0-4] + " " +$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" " + $$[$0];
break;
case 83:
this.$=$$[$0-1] + " " +$$[$0];
break;
case 85:
this.$=$$[$0-2]+ " " + $$[$0-1] +" " + $$[$0];
break;
case 86:
this.$=$$[$0-6] + " "+ $$[$0-5] + $$[$0-4]+$$[$0-3]+" "+$$[$0-2]+" "+ $$[$0-1]+ " " +$$[$0];
break;
case 87:
this.$=$$[$0-9]+$$[$0-8]+" "+$$[$0-7]+" "+$$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" " +$$[$0-2]+$$[$0-1]+" "+$$[$0];
break;
case 88:
this.$=$$[$0-8] + $$[$0-7] +" "+ $$[$0-6] + " " + $$[$0-5] + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0] ;
break;
case 94:
this.$=$$[$0-2] + " " + $$[$0-1] + " "+ $$[$0];
break;
case 95:
this.$=$$[$0-5] + " "+ $$[$0-4] + " " + $$[$0-3] +$$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 98:
this.$=$$[$0-1]+ $$[$0];
break;
case 99:
this.$=$$[$0-3] + " " +  $$[$0-2] +" " + $$[$0-1] + " "  +  $$[$0];
break;
case 100:
this.$=$$[$0-5] + " " + $$[$0-4] + " "+$$[$0-3] + $$[$0-2] + " " + $$[$0-1]+ " " + $$[$0];
break;
case 104:
this.$=$$[$0-1] + " " + $$[$0];
break;
case 105:
this.$=$$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 106:
this.$=$$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " "+ $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 110: case 113:
this.$=$$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,82:$V8,87:$V9,89:$Va,90:$Vb,94:$Vc,96:$Vd,107:$Ve},{1:[3]},{2:$V0,5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,82:$V8,87:$V9,89:$Va,90:$Vb,94:$Vc,96:$Vd,107:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),{12:[1,35]},o($Vf,[2,9]),o($Vf,[2,10]),{16:36,19:[1,37]},{17:[1,38]},{17:$Vg,20:$Vh,21:$Vi,27:$Vj,53:$Vk,92:41},{12:[1,44]},o($Vf,[2,68]),o($Vf,[2,69]),o($Vf,[2,70]),o($Vf,[2,71]),o($Vf,[2,72]),{19:[1,45]},{97:[1,46]},{19:[1,47]},o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),{53:[1,48]},{53:[1,49]},{53:[1,50]},{53:[1,51]},{74:[1,52]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,8]),{12:[1,53],17:[1,54]},o($Vm,$Vg,{92:55,27:$Vj,53:$Vk}),{11:62,18:56,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{12:[1,89]},{12:[1,90]},o($VC,[2,104]),{16:91,19:$VD},{15:95,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,54:[1,94],93:93},o($VE,[2,16]),{53:$Vk,92:96},{11:62,18:97,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{53:$Vk,92:98},{19:$VF,29:99,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:103,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:104,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{2:$V0,7:105,15:106,16:12,19:[1,107],22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},{2:$V0,4:112,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,77:$VH,78:$VI,79:111,82:$V8,87:$V9,88:108,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},o($VE,[2,11]),{11:62,18:114,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{74:[1,115]},{12:[1,116]},o($VC,[2,24]),o($VC,[2,25],{20:$VK,21:$VL,48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY,102:[1,119]}),o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,40]),o($VC,[2,41]),o($VC,[2,42]),o($VC,[2,43]),o($VC,[2,44]),o($VC,[2,45]),o($VZ,[2,26]),o($V_,$V$,{66:[1,133]}),o($VZ,[2,28]),o($V_,$V01,{92:41,53:$Vk}),o($VZ,[2,30]),o($VZ,[2,31]),o($VZ,[2,32]),o($VZ,[2,33]),o($VZ,[2,34]),{15:134,19:$VF,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,29:135,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{53:[1,136]},{53:[1,137]},{53:[1,138]},{53:[1,139]},{53:[1,140]},{19:$VF,29:141,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{53:[1,142]},o($VZ,[2,53]),{19:$VF,29:143,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},o($VE,[2,14]),o($VE,[2,15]),o($Vm,[2,23]),o($Vm,$Vg,{27:$Vj}),{54:[1,144]},o($V11,[2,97]),{19:$VF,29:145,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{74:[1,146]},{12:[1,147],97:[1,148]},{12:[1,149]},{48:$VM,49:$VN,50:$VO,51:$VP,54:[1,150],55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},o($VZ,$V$),o($VZ,$V01),{19:$VF,29:135,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{48:$VM,49:$VN,50:$VO,51:$VP,54:[1,151],55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},{48:$VM,49:$VN,50:$VO,51:$VP,54:[1,152],55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},{19:$VF,29:153,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{16:36,19:$VD},{17:$Vg,20:$Vh,21:$Vi,27:$Vj},{80:[1,154]},{12:[1,155]},{12:[1,156]},{80:[2,91]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,80:[2,92],82:$V8,87:$V9,89:$Va,90:$Vb,94:$Vc,96:$Vd,107:$Ve},{11:62,12:[1,157],18:158,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{12:[1,159]},{2:$V0,4:112,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,77:$VH,78:$VI,79:111,82:$V8,87:$V9,88:160,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},o($VE,[2,13]),o($VC,[2,66]),o($VC,[2,67]),{103:[1,161],106:[1,162]},{19:$VF,29:163,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:164,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:165,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:166,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:167,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:168,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:169,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:170,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:171,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:172,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:173,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:174,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{19:$VF,29:175,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{11:62,18:176,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{54:[1,177]},{48:$VM,49:$VN,50:$VO,51:$VP,54:[1,178],55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},{11:62,18:179,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{11:62,18:180,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{11:62,18:181,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{11:62,18:182,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{11:62,18:183,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},o($VZ,[2,46]),{19:$VF,29:184,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},o($V21,[2,60],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW}),o($V11,[2,96]),{27:[1,185],48:$VM,49:$VN,50:$VO,51:$VP,54:[2,98],55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},{2:$V0,4:189,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,77:[1,187],78:[1,188],82:$V8,87:$V9,89:$Va,90:$Vb,94:$Vc,95:186,96:$Vd,107:$Ve},o($Vf,[2,105]),{98:[1,190]},o($Vf,[2,114]),{74:[1,191]},{74:[1,192]},{74:[1,193]},{12:[1,194],48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},{87:[1,195]},{80:[2,89]},{80:[2,90]},o($V31,[2,93]),{12:[1,196]},o($VE,[2,12]),{80:[1,197]},{53:[1,198]},{53:[1,199]},o($V41,[2,47],{50:$VO,51:$VP,55:$VQ}),o($V41,[2,48],{50:$VO,51:$VP,55:$VQ}),o($VZ,[2,49]),o($VZ,[2,50]),o($VZ,[2,52]),o($V51,[2,54],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,59:$VT,60:$VU,61:$VV,62:$VW}),o($V51,[2,55],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,59:$VT,60:$VU,61:$VV,62:$VW}),o($V61,[2,56],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ}),o($V61,[2,57],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ}),o($V61,[2,58],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ}),o($V61,[2,59],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ}),o($V21,[2,61],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW}),o([12,20,21,27,54,65,66,67,97,102],[2,62],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX}),{67:[1,200]},{19:$VF,29:201,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},o($VZ,[2,64]),{54:[1,202]},{54:[1,203]},{54:[1,204]},{54:[1,205]},{54:[1,206]},{27:[1,207],48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},{15:95,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,93:208},{80:[1,209]},{12:[1,210]},{12:[1,211]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,80:[2,103],82:$V8,87:$V9,89:$Va,90:$Vb,94:$Vc,96:$Vd,107:$Ve},{12:[1,212]},{2:$V0,4:217,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:213,77:$V71,78:$V81,79:216,82:$V8,87:$V9,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},{83:218,84:219,85:$V91,86:$Va1},{2:$V0,4:112,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,77:$VH,78:$VI,79:111,82:$V8,87:$V9,88:222,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},{19:$VF,29:224,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,40:223,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{53:[1,225]},o($V31,[2,94]),o($Vf,[2,95]),{54:[1,226]},{54:[1,227]},{11:62,18:228,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},o($VC,[2,65],{48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY}),o($VC,[2,107]),o($VC,[2,108]),o($VC,[2,109]),o($VC,[2,111]),o($VC,[2,112]),{19:$VF,29:229,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},{54:[2,99]},o($Vf,[2,100]),{80:[2,101]},{80:[2,102]},o($Vf,[2,106]),{76:230,80:[1,231]},{12:[1,232]},{12:[1,233]},o($V31,[2,76]),o($V31,[2,77],{7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,68:15,69:16,70:17,71:18,72:19,6:34,2:$V0,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,73:$V7,82:$V8,87:$V9,89:$Va,90:$Vb,94:$Vc,96:$Vd,107:$Ve}),{80:[1,234]},{80:[2,82],83:235,84:219,85:$V91,86:$Va1},{11:62,18:236,19:$Vn,28:57,29:58,30:70,31:71,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:59,39:60,40:61,41:63,42:64,43:65,44:66,45:67,46:68,47:69,48:$Vt,52:$Vu,53:$Vv,56:87,63:$Vw,99:$Vx,100:$Vy,101:$Vz,104:$VA,105:$VB},{67:[1,237]},{80:[1,238]},{54:[1,239]},{20:$VK,21:$VL,48:$VM,49:$VN,50:$VO,51:$VP,55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},{19:$VF,29:240,30:70,31:100,32:72,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,48:$Vt,52:$Vu,53:$VG,56:87,63:$Vw},o($VC,[2,110]),o($VC,[2,113]),o($VC,[2,63]),{48:$VM,49:$VN,50:$VO,51:$VP,54:[1,241],55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},o($Vf,[2,73]),o($Vf,[2,78],{81:[1,242]}),o($V31,[2,74]),o($V31,[2,75]),o($Vf,[2,81]),{80:[2,83]},{67:[1,243]},{2:$V0,4:217,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:244,77:$V71,78:$V81,79:216,82:$V8,87:$V9,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},o($Vf,[2,86]),{74:[1,245]},{48:$VM,49:$VN,50:$VO,51:$VP,54:[1,246],55:$VQ,57:$VR,58:$VS,59:$VT,60:$VU,61:$VV,62:$VW,64:$VX,65:$VY},o($VZ,[2,51]),{68:247,73:$V7,74:[1,248]},{2:$V0,4:217,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:249,77:$V71,78:$V81,79:216,82:$V8,87:$V9,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},o($V31,[2,85]),{2:$V0,4:112,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,77:$VH,78:$VI,79:111,82:$V8,87:$V9,88:250,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},{12:[1,251]},o($Vf,[2,79]),{2:$V0,4:217,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,68:15,69:16,70:17,71:18,72:19,73:$V7,75:252,77:$V71,78:$V81,79:216,82:$V8,87:$V9,89:$Va,90:$Vb,91:$VJ,94:$Vc,96:$Vd,107:$Ve},o($V31,[2,84]),{80:[1,253]},o($Vf,[2,88]),{80:[1,254]},o($Vf,[2,87]),o($Vf,[2,80])],
defaultActions: {33:[2,1],111:[2,91],155:[2,89],156:[2,90],208:[2,99],210:[2,101],211:[2,102],235:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//const {Aritmetica,tipoArit} = require('./expresion/Aritmetica')
//const {Relacional,TipoRel} = require('./expresion/relaciones')
//const {tipo} = require('./expresion/retorno')
//const {Variable} = require('./expresion/variable')
//const {Nativo,tipoNat} = require('./expresion/nativo')
//const {Declarar} = require('./instrucciones/declarar')
//const {Print} = require('./instrucciones/print')
//const {Bloque} = require('./instrucciones/bloque')
//const {If} = require('./instrucciones/If')
const {addError} = require('../analisisSem/manejoErrores');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2://comentario vlineas
break;
case 3:return 20;
break;
case 4:return 21;
break;
case 5:return 49;
break;
case 6:return 48;
break;
case 7:return 51;
break;
case 8:return 50;
break;
case 9:return 55;
break;
case 10:return 63;
break;
case 11:return 53;
break;
case 12:return 54;
break;
case 13:return 74;
break;
case 14:return 80;
break;
case 15:return 'corcheteabre';
break;
case 16:return 'corchetecierra';
break;
case 17:return 27;
break;
case 18:return 12;
break;
case 19:return 57;
break;
case 20:return 17;
break;
case 21:return 102;
break;
case 22:return 66;
break;
case 23:return 67;
break;
case 24:return 58;
break;
case 25:return 59;
break;
case 26:return 61;
break;
case 27:return 97;
break;
case 28:return 60;
break;
case 29:return 62;
break;
case 30:return 65;
break;
case 31:return 64;
break;
case 32:return 22;
break;
case 33:return 23;
break;
case 34:return 24;
break;
case 35:return 25;
break;
case 36:return 26;
break;
case 37:return 52;
break;
case 38:return 'resnew';
break;
case 39:return 73;
break;
case 40:return 81;
break;
case 41:return 82;
break;
case 42:return 85;
break;
case 43:return 86;
break;
case 44:return 87;
break;
case 45:return 89;
break;
case 46:return 90;
break;
case 47:return 77;
break;
case 48:return 78;
break;
case 49:return 91;
break;
case 50:return 94;
break;
case 51:return 96;
break;
case 52:return 98;
break;
case 53:return 99;
break;
case 54:return 100;
break;
case 55:return 101;
break;
case 56:return 103;
break;
case 57:return 104;
break;
case 58:return 105;
break;
case 59:return 106;
break;
case 60:return 107;
break;
case 61:return 35;
break;
case 62:return 36;
break;
case 63:return 37;
break;
case 64:return 19;
break;
case 65:return 33;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 34; 
break;
case 67:return 5;
break;
case 68:addError('Error l√©xico', "Caracter no reconocido\" " + yy_.yytext +" \" ", yy_.yylloc.first_line, yy_.yylloc.first_columm); 
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}