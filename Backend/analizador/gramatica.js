/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,25],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,21],$V6=[1,34],$V7=[1,35],$V8=[1,36],$V9=[1,37],$Va=[1,38],$Vb=[1,52],$Vc=[1,53],$Vd=[1,55],$Ve=[1,54],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,20],$Vl=[1,22],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,23],$Vs=[5,20,21,22,23,24,25,27,28,29,30,31,45,49,50,61,71,78,80,83,84,85,87,88,93,95,98,99,100,103,104,106],$Vt=[45,46,47,48,52,53,54,55,56,57,58,59,60,64,65,101],$Vu=[2,35],$Vv=[1,70],$Vw=[1,69],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,67],$VJ=[1,68],$VK=[1,82],$VL=[2,20],$VM=[1,85],$VN=[1,86],$VO=[25,51],$VP=[13,26,45,46,47,48,51,52,53,54,55,56,57,58,59,60,62,63,64,65,96,101],$VQ=[1,94],$VR=[1,96],$VS=[13,18],$VT=[5,13,20,21,22,23,24,25,26,27,28,29,30,31,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,78,80,83,84,85,87,88,93,95,96,98,99,100,101,103,104,106],$VU=[1,129],$VV=[1,136],$VW=[1,144],$VX=[1,145],$VY=[1,148],$VZ=[13,26,45,46,47,48,51,52,53,54,55,56,57,58,59,60,62,63,96],$V_=[2,34],$V$=[13,26,51,59,60,62,63,96],$V01=[5,13,20,21,22,23,24,25,27,28,29,30,31,45,49,50,61,71,78,80,83,84,85,87,88,93,95,98,99,100,103,104,106],$V11=[13,26,45,46,51,53,54,55,56,57,58,59,60,62,63,96],$V21=[13,26,51,53,54,59,60,62,63,96],$V31=[13,26,51,53,54,55,56,57,58,59,60,62,63,96],$V41=[13,26,45,46,47,48,51,52,53,54,55,56,57,58,59,60,62,63,64,65,73,96,101],$V51=[13,45,46,47,48,51,52,53,54,55,56,57,58,59,60,64,65,101],$V61=[78,83,84],$V71=[13,26,51,62,63,96],$V81=[1,211],$V91=[1,216],$Va1=[1,217];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CODIGO":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"SENTENCIAS":8,"INCREYDECRE":9,"FUNCIONES":10,"METODOS":11,"LLAMADAS":12,"sigpuntoycoma":13,"FCOUT":14,"FEXECUTE":15,"TIPODATO":16,"LISTANVARIABLES":17,"sigigual":18,"ASIGNACIONES":19,"resint":20,"resdouble":21,"resbool":22,"reschar":23,"resstring":24,"id":25,"signocoma":26,"caracter":27,"cadena":28,"bool":29,"decimal":30,"numero":31,"OPERACIONES":32,"OPERACIONESRELACIONAL":33,"OPERADORTERNARIO":34,"OPERADORESLOGICOS":35,"AGRUPACION":36,"CASTEAR":37,"FTOLOWER":38,"FTOUPPER":39,"FROUND":40,"FLENGTH":41,"FTYPEOF":42,"FTOSTRING":43,"FCSTR":44,"menos":45,"mas":46,"por":47,"dividir":48,"respotencia":49,"parentesisabre":50,"parentesiscierra":51,"modulo":52,"igualigual":53,"negacionigual":54,"menorigual":55,"menorque":56,"mayorigual":57,"mayorque":58,"andlogico":59,"orlogico":60,"notlogico":61,"siginterrogacion":62,"dospuntos":63,"sigincremento":64,"sigdecremento":65,"SENTIF":66,"SENTSWITCH":67,"SENTWHILE":68,"SENTFOR":69,"SENTDOWHILE":70,"resif":71,"CONDICIONALIF":72,"llaveabre":73,"CONTENIDOS":74,"FINIF":75,"resbreak":76,"RETORNOS":77,"llavecierra":78,"reselse":79,"resswitch":80,"SWCASOS":81,"SWCASE":82,"rescase":83,"resdefault":84,"reswhile":85,"CONTENIDOSCICLOS":86,"resfor":87,"resdo":88,"rescontinue":89,"resreturn":90,"SNPARAMETROS":91,"PARAMETROS":92,"resvoid":93,"CONTENIDOSMETOD":94,"rescout":95,"menormenor":96,"resendl":97,"restolower":98,"restoupper":99,"resround":100,"sigpunto":101,"reslength":102,"restypeof":103,"restostring":104,"rescstr":105,"resexecute":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"sigpuntoycoma",18:"sigigual",20:"resint",21:"resdouble",22:"resbool",23:"reschar",24:"resstring",25:"id",26:"signocoma",27:"caracter",28:"cadena",29:"bool",30:"decimal",31:"numero",45:"menos",46:"mas",47:"por",48:"dividir",49:"respotencia",50:"parentesisabre",51:"parentesiscierra",52:"modulo",53:"igualigual",54:"negacionigual",55:"menorigual",56:"menorque",57:"mayorigual",58:"mayorque",59:"andlogico",60:"orlogico",61:"notlogico",62:"siginterrogacion",63:"dospuntos",64:"sigincremento",65:"sigdecremento",71:"resif",73:"llaveabre",76:"resbreak",78:"llavecierra",79:"reselse",80:"resswitch",83:"rescase",84:"resdefault",85:"reswhile",87:"resfor",88:"resdo",89:"rescontinue",90:"resreturn",93:"resvoid",95:"rescout",96:"menormenor",97:"resendl",98:"restolower",99:"restoupper",100:"resround",101:"sigpunto",102:"reslength",103:"restypeof",104:"restostring",105:"rescstr",106:"resexecute"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,3],[7,5],[7,4],[16,1],[16,1],[16,1],[16,1],[16,1],[17,1],[17,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[32,2],[32,3],[32,3],[32,3],[32,3],[32,6],[32,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[35,3],[35,3],[35,2],[34,5],[36,3],[37,4],[9,2],[9,2],[8,1],[8,1],[8,1],[8,1],[8,1],[66,7],[72,1],[72,1],[72,1],[74,2],[74,1],[74,1],[75,1],[75,3],[75,5],[67,7],[81,1],[81,2],[82,4],[82,3],[68,7],[69,11],[70,9],[86,2],[86,2],[86,1],[86,1],[77,2],[77,3],[10,6],[91,3],[91,2],[92,2],[92,4],[11,6],[94,2],[94,2],[94,1],[12,2],[14,4],[14,6],[38,4],[39,4],[40,4],[41,5],[42,4],[43,4],[44,5],[15,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3:
 this.$ = $$[$0];
break;
case 4: case 5: case 6: case 7: case 8: case 10: case 11:
console.log($$[$0]);this.$=$$[$0];
break;
case 9:
console.log($$[$0-1]);this.$=$$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,80:$Vg,85:$Vh,87:$Vi,88:$Vj,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},{1:[3]},{5:[1,61],6:62,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,80:$Vg,85:$Vh,87:$Vi,88:$Vj,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},o($Vs,[2,3]),o($Vs,[2,4]),o($Vs,[2,5]),o([5,20,21,22,23,24,25,27,28,29,30,31,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,64,65,71,78,80,83,84,85,87,88,93,95,98,99,100,101,103,104,106],[2,6]),o($Vs,[2,7]),o($Vs,[2,8]),o($Vt,$Vu,{13:[1,63]}),o($Vs,[2,10]),o($Vs,[2,11]),{17:64,25:[1,65]},{18:[1,66]},o($Vs,[2,64]),o($Vs,[2,65]),o($Vs,[2,66]),o($Vs,[2,67]),o($Vs,[2,68]),{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{25:[1,83]},o([18,45,46,47,48,52,53,54,55,56,57,58,59,60,64,65,101],$VL,{91:84,26:$VM,50:$VN}),{96:[1,87]},{25:[1,88]},o($VO,[2,15]),o($VO,[2,16]),o($VO,[2,17]),o($VO,[2,18]),o($VO,[2,19]),{50:[1,89]},{50:[1,90]},{50:[1,91]},{50:[1,92]},{73:[1,93]},o($VP,[2,23]),o($VP,[2,24]),o($VP,[2,25]),o($VP,[2,26]),o($VP,[2,27]),o($VP,[2,28]),o([13,26,45,46,47,48,51,52,53,54,55,56,57,58,59,60,63,64,65,96,101],[2,29],{62:$VQ}),o($VP,[2,30]),o($VP,[2,31]),o($VP,[2,32]),o($VP,[2,33]),o($VP,[2,36]),o($VP,[2,37]),o($VP,[2,38]),o($VP,[2,39]),o($VP,[2,40]),o($VP,[2,41]),o($VP,[2,42]),{9:97,12:98,19:95,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{50:[1,99]},{9:97,12:98,19:100,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,16:102,19:101,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{50:[1,103]},{50:[1,104]},{50:[1,105]},{50:[1,106]},{50:[1,107]},{1:[2,1]},o($Vs,[2,2]),o($Vs,[2,9]),{13:[1,108],18:[1,109]},o($VS,$VL,{91:110,26:$VM,50:$VN}),{9:97,12:98,19:111,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},o($VT,[2,62]),o($VT,[2,63]),{9:97,12:98,19:112,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:113,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:114,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:115,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:116,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:117,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:118,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:119,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:120,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:121,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:122,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:123,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:124,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{102:[1,125],105:[1,126]},{50:$VN,91:127},o($VP,[2,102]),{17:128,25:$VU},{16:132,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,51:[1,131],92:130},{9:97,12:98,19:133,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{50:$VN,91:134},{9:97,12:98,19:19,25:$VV,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:137,34:41,35:138,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,72:135,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:19,25:$VV,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:137,34:41,35:138,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,72:139,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:19,25:$VV,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:137,34:41,35:138,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,72:140,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{7:141,16:142,17:13,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$VU},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,76:$VW,77:146,80:$Vg,85:$Vh,86:143,87:$Vi,88:$Vj,89:$VX,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},{9:97,12:98,19:149,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},o($VZ,[2,43],{64:$VI,65:$VJ,101:$VK}),o($VP,[2,22],{91:84,50:$VN}),o($VP,$V_),o($VP,$Vu),{9:97,12:98,19:150,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},o($V$,[2,58],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,64:$VI,65:$VJ,101:$VK}),{45:$Vv,46:$Vw,47:$Vx,48:$Vy,51:[1,151],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{51:[1,152]},{9:97,12:98,19:153,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:154,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:155,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:156,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:157,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},o($V01,[2,12]),{9:97,12:98,19:158,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{73:[1,159]},{13:[1,160],45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},o($V11,[2,44],{47:$Vx,48:$Vy,52:$Vz,64:$VI,65:$VJ,101:$VK}),o($V11,[2,45],{47:$Vx,48:$Vy,52:$Vz,64:$VI,65:$VJ,101:$VK}),o($VZ,[2,46],{64:$VI,65:$VJ,101:$VK}),o($VZ,[2,47],{64:$VI,65:$VJ,101:$VK}),o($VZ,[2,49],{64:$VI,65:$VJ,101:$VK}),o($V21,[2,50],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,55:$VC,56:$VD,57:$VE,58:$VF,64:$VI,65:$VJ,101:$VK}),o($V21,[2,51],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,55:$VC,56:$VD,57:$VE,58:$VF,64:$VI,65:$VJ,101:$VK}),o($V31,[2,52],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,64:$VI,65:$VJ,101:$VK}),o($V31,[2,53],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,64:$VI,65:$VJ,101:$VK}),o($V31,[2,54],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,64:$VI,65:$VJ,101:$VK}),o($V31,[2,55],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,64:$VI,65:$VJ,101:$VK}),o($V$,[2,56],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,64:$VI,65:$VJ,101:$VK}),o([13,26,51,60,62,63,96],[2,57],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,64:$VI,65:$VJ,101:$VK}),{50:[1,161]},{50:[1,162]},{73:[1,163]},o($VS,[2,21]),o($VS,$VL,{26:$VM}),{51:[1,164]},o($V41,[2,95]),{25:[1,165]},{13:[1,166],45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,96:[1,167],101:$VK},{13:[1,168]},{51:[1,169]},o($V51,[2,70],{91:84,50:$VN}),o($V51,[2,71],{62:$VQ}),o($V51,[2,72]),{51:[1,170]},{51:[1,171]},{13:[1,172]},{17:64,25:$VU},{78:[1,173]},{13:[1,174]},{13:[1,175]},{78:[2,89]},{6:62,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,78:[2,90],80:$Vg,85:$Vh,87:$Vi,88:$Vj,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},{9:97,12:98,13:[1,176],19:177,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,63:[1,178],64:$VI,65:$VJ,101:$VK},{26:[1,179],45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},o($VP,[2,60]),{9:97,12:98,19:180,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{45:$Vv,46:$Vw,47:$Vx,48:$Vy,51:[1,181],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{45:$Vv,46:$Vw,47:$Vx,48:$Vy,51:[1,182],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{45:$Vv,46:$Vw,47:$Vx,48:$Vy,51:[1,183],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{45:$Vv,46:$Vw,47:$Vx,48:$Vy,51:[1,184],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{45:$Vv,46:$Vw,47:$Vx,48:$Vy,51:[1,185],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{13:[1,186],45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,76:$VW,77:146,80:$Vg,85:$Vh,86:187,87:$Vi,88:$Vj,89:$VX,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},o($V01,[2,14]),{51:[1,188]},{51:[1,189]},{4:193,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,76:[1,191],80:$Vg,85:$Vh,87:$Vi,88:$Vj,89:[1,192],93:$Vk,94:190,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},o($V41,[2,94]),{26:[1,194],51:[2,96]},o($Vs,[2,103]),{97:[1,195]},o($Vs,[2,112]),{73:[1,196]},{73:[1,197]},{73:[1,198]},{9:97,12:98,19:19,25:$VV,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:137,34:41,35:138,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,72:199,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{85:[1,200]},{78:[2,87]},{78:[2,88]},o($V61,[2,91]),{13:[1,201],45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},{9:97,12:98,19:202,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:203,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},o($V71,[2,61],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK}),o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107]),o($VP,[2,109]),o($VP,[2,110]),o($V01,[2,13]),{78:[1,204]},o($VP,[2,108]),o($VP,[2,111]),{78:[1,205]},{13:[1,206]},{13:[1,207]},{6:62,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,78:[2,101],80:$Vg,85:$Vh,87:$Vi,88:$Vj,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},{16:132,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,92:208},{13:[1,209]},{4:213,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,74:210,76:$V81,77:212,80:$Vg,85:$Vh,87:$Vi,88:$Vj,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},{81:214,82:215,83:$V91,84:$Va1},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,76:$VW,77:146,80:$Vg,85:$Vh,86:218,87:$Vi,88:$Vj,89:$VX,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},{13:[1,219]},{50:[1,220]},o($V61,[2,92]),o($V71,[2,59],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK}),{45:$Vv,46:$Vw,47:$Vx,48:$Vy,51:[1,221],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,64:$VI,65:$VJ,101:$VK},o($Vs,[2,93]),o($Vs,[2,98]),{78:[2,99]},{78:[2,100]},{51:[2,97]},o($Vs,[2,104]),{75:222,78:[1,223]},{13:[1,224]},o($V61,[2,74]),o($V61,[2,75],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,66:14,67:15,68:16,69:17,70:18,19:19,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,6:62,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,45:$Vb,49:$Vc,50:$Vd,61:$Ve,71:$Vf,80:$Vg,85:$Vh,87:$Vi,88:$Vj,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr}),{78:[1,225]},{78:[2,80],81:226,82:215,83:$V91,84:$Va1},{9:97,12:98,19:227,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{63:[1,228]},{78:[1,229]},{9:230,12:98,19:19,25:$VR,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},{9:97,12:98,19:19,25:$VV,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:137,34:41,35:138,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,72:231,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq},o($VP,[2,48]),o($Vs,[2,69]),o($Vs,[2,76],{79:[1,232]}),o($V61,[2,73]),o($Vs,[2,79]),{78:[2,81]},{45:$Vv,46:$Vw,47:$Vx,48:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,63:[1,233],64:$VI,65:$VJ,101:$VK},{4:213,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,74:234,76:$V81,77:212,80:$Vg,85:$Vh,87:$Vi,88:$Vj,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},o($Vs,[2,84]),o($Vt,$V_,{51:[1,235]}),{51:[1,236]},{66:237,71:$Vf,73:[1,238]},{4:213,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,74:239,76:$V81,77:212,80:$Vg,85:$Vh,87:$Vi,88:$Vj,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},o($V61,[2,83]),{73:[1,240]},{13:[1,241]},o($Vs,[2,77]),{4:213,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,74:242,76:$V81,77:212,80:$Vg,85:$Vh,87:$Vi,88:$Vj,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},o($V61,[2,82]),{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,19:19,20:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:39,33:40,34:41,35:42,36:43,37:44,38:45,39:46,40:47,41:48,42:49,43:50,44:51,45:$Vb,49:$Vc,50:$Vd,61:$Ve,66:14,67:15,68:16,69:17,70:18,71:$Vf,76:$VW,77:146,80:$Vg,85:$Vh,86:243,87:$Vi,88:$Vj,89:$VX,90:$VY,93:$Vk,95:$Vl,98:$Vm,99:$Vn,100:$Vo,103:$Vp,104:$Vq,106:$Vr},o($Vs,[2,86]),{78:[1,244]},{78:[1,245]},o($Vs,[2,78]),o($Vs,[2,85])],
defaultActions: {61:[2,1],146:[2,89],174:[2,87],175:[2,88],206:[2,99],207:[2,100],208:[2,97],226:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//const {Aritmetica,tipoArit} = require('./expresion/Aritmetica')
//const {Relacional,TipoRel} = require('./expresion/relaciones')
//const {tipo} = require('./expresion/retorno')
//const {Variable} = require('./expresion/variable')
//const {Nativo,tipoNat} = require('./expresion/nativo')
//const {Declarar} = require('./instrucciones/declarar')
//const {Print} = require('./instrucciones/print')
//const {Bloque} = require('./instrucciones/bloque')
//const {If} = require('./instrucciones/If')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2:return 46;
break;
case 3:return 45;
break;
case 4:return 48;
break;
case 5:return 47;
break;
case 6:return 52;
break;
case 7:return 61;
break;
case 8:return 50;
break;
case 9:return 51;
break;
case 10:return 73;
break;
case 11:return 78;
break;
case 12:return 'corcheteabre';
break;
case 13:return 'corchetecierra';
break;
case 14:return 26;
break;
case 15:return 13;
break;
case 16:return 18;
break;
case 17:return 101;
break;
case 18:return 62;
break;
case 19:return 63;
break;
case 20:return 53;
break;
case 21:return 54;
break;
case 22:return 56;
break;
case 23:return 58;
break;
case 24:return 55;
break;
case 25:return 57;
break;
case 26:return 60;
break;
case 27:return 59;
break;
case 28:return 64;
break;
case 29:return 65;
break;
case 30:return 96;
break;
case 31:return 20;
break;
case 32:return 21;
break;
case 33:return 22;
break;
case 34:return 23;
break;
case 35:return 24;
break;
case 36:return 49;
break;
case 37:return 'resnew';
break;
case 38:return 71;
break;
case 39:return 79;
break;
case 40:return 80;
break;
case 41:return 83;
break;
case 42:return 84;
break;
case 43:return 85;
break;
case 44:return 87;
break;
case 45:return 88;
break;
case 46:return 76;
break;
case 47:return 89;
break;
case 48:return 90;
break;
case 49:return 93;
break;
case 50:return 95;
break;
case 51:return 97;
break;
case 52:return 98;
break;
case 53:return 99;
break;
case 54:return 100;
break;
case 55:return 102;
break;
case 56:return 103;
break;
case 57:return 104;
break;
case 58:return 105;
break;
case 59:return 106;
break;
case 60:return 29;
break;
case 61:return 30;
break;
case 62:return 31;
break;
case 63:return 25;
break;
case 64:return 27;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 28; 
break;
case 66:return 5;
break;
case 67:console.log(yy_.yylloc.first_line, yy_.yylloc.first_columm, 'Lexico', yy_.yytext)
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:\/\/.*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?::)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:<<)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}