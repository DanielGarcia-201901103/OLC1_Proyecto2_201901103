/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,23],$V2=[1,24],$V3=[1,25],$V4=[1,26],$V5=[1,19],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,18],$Vc=[1,20],$Vd=[1,21],$Ve=[5,19,20,21,22,23,24,73,79,81,85,86,87,89,90,95,97,108],$Vf=[2,19],$Vg=[1,40],$Vh=[1,41],$Vi=[24,53],$Vj=[12,17],$Vk=[1,58],$Vl=[1,59],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,76],$Vr=[1,77],$Vs=[1,79],$Vt=[1,78],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[12,53,65,98],$VA=[1,87],$VB=[1,95],$VC=[1,101],$VD=[1,102],$VE=[1,105],$VF=[5,12,19,20,21,22,23,24,73,79,81,85,86,87,89,90,95,97,108],$VG=[1,110],$VH=[1,109],$VI=[1,111],$VJ=[1,112],$VK=[1,113],$VL=[1,114],$VM=[1,115],$VN=[1,116],$VO=[1,117],$VP=[1,118],$VQ=[1,119],$VR=[1,120],$VS=[1,121],$VT=[1,122],$VU=[1,123],$VV=[12,25,47,48,49,50,53,54,55,56,57,58,59,60,62,63,64,65,66,67,98,103],$VW=[12,47,48,49,50,53,54,55,56,57,58,59,60,62,63,65,66,67,98,103],$VX=[2,24],$VY=[2,26],$VZ=[12,53,65,74,98],$V_=[12,25,53,62,63,64,65,66,67,98,103],$V$=[79,85,86],$V01=[12,25,47,48,53,55,56,57,58,59,60,62,63,64,65,66,67,98,103],$V11=[12,25,53,55,56,62,63,64,65,66,67,98,103],$V21=[12,25,53,55,56,57,58,59,60,62,63,64,65,66,67,98,103],$V31=[1,206],$V41=[1,211],$V51=[1,212];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CODIGO":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"SENTENCIAS":8,"FUNCIONES":9,"METODOS":10,"LLAMADAS":11,"sigpuntoycoma":12,"FCOUT":13,"FEXECUTE":14,"TIPODATO":15,"LISTANVARIABLES":16,"sigigual":17,"ASIGNACIONES":18,"resint":19,"resdouble":20,"resbool":21,"reschar":22,"resstring":23,"id":24,"signocoma":25,"EXPRESIONES":26,"OTRASEXPRESIONES":27,"OPERACIONES":28,"OPERACIONESRELACIONAL":29,"OPERADORESLOGICOS":30,"caracter":31,"cadena":32,"bool":33,"decimal":34,"numero":35,"AGRUPACION":36,"OPERADORTERNARIO":37,"CASTEAR":38,"INCREYDECRE":39,"FTOLOWER":40,"FTOUPPER":41,"FROUND":42,"FLENGTH":43,"FTYPEOF":44,"FTOSTRING":45,"FCSTR":46,"menos":47,"mas":48,"por":49,"dividir":50,"respotencia":51,"parentesisabre":52,"parentesiscierra":53,"modulo":54,"igualigual":55,"negacionigual":56,"menorigual":57,"menorque":58,"mayorigual":59,"mayorque":60,"notlogico":61,"andlogico":62,"orlogico":63,"siginterrogacion":64,"dospuntos":65,"sigincremento":66,"sigdecremento":67,"SENTIF":68,"SENTSWITCH":69,"SENTWHILE":70,"SENTFOR":71,"SENTDOWHILE":72,"resif":73,"llaveabre":74,"CONTENIDOS":75,"FINIF":76,"resbreak":77,"RETORNOS":78,"llavecierra":79,"reselse":80,"resswitch":81,"CONDICIONALIF":82,"SWCASOS":83,"SWCASE":84,"rescase":85,"resdefault":86,"reswhile":87,"CONTENIDOSCICLOS":88,"resfor":89,"resdo":90,"rescontinue":91,"resreturn":92,"SNPARAMETROS":93,"PARAMETROS":94,"resvoid":95,"CONTENIDOSMETOD":96,"rescout":97,"menormenor":98,"resendl":99,"restolower":100,"restoupper":101,"resround":102,"sigpunto":103,"reslength":104,"restypeof":105,"restostring":106,"rescstr":107,"resexecute":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"sigpuntoycoma",17:"sigigual",19:"resint",20:"resdouble",21:"resbool",22:"reschar",23:"resstring",24:"id",25:"signocoma",31:"caracter",32:"cadena",33:"bool",34:"decimal",35:"numero",47:"menos",48:"mas",49:"por",50:"dividir",51:"respotencia",52:"parentesisabre",53:"parentesiscierra",54:"modulo",55:"igualigual",56:"negacionigual",57:"menorigual",58:"menorque",59:"mayorigual",60:"mayorque",61:"notlogico",62:"andlogico",63:"orlogico",64:"siginterrogacion",65:"dospuntos",66:"sigincremento",67:"sigdecremento",73:"resif",74:"llaveabre",77:"resbreak",79:"llavecierra",80:"reselse",81:"resswitch",82:"CONDICIONALIF",85:"rescase",86:"resdefault",87:"reswhile",89:"resfor",90:"resdo",91:"rescontinue",92:"resreturn",95:"resvoid",97:"rescout",98:"menormenor",99:"resendl",100:"restolower",101:"restoupper",102:"resround",103:"sigpunto",104:"reslength",105:"restypeof",106:"restostring",107:"rescstr",108:"resexecute"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,3],[7,5],[7,4],[15,1],[15,1],[15,1],[15,1],[15,1],[16,1],[16,3],[18,1],[18,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[28,2],[28,3],[28,3],[28,3],[28,3],[28,6],[28,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[30,2],[30,3],[30,3],[37,5],[36,3],[38,4],[39,2],[39,2],[8,1],[8,1],[8,1],[8,1],[8,1],[68,7],[75,2],[75,1],[75,1],[76,1],[76,3],[76,5],[69,7],[83,1],[83,2],[84,4],[84,3],[70,7],[71,11],[72,9],[88,2],[88,2],[88,1],[88,1],[78,2],[78,3],[9,6],[93,3],[93,2],[94,2],[94,4],[10,6],[96,2],[96,2],[96,1],[11,2],[13,4],[13,6],[40,4],[41,4],[42,4],[43,5],[44,4],[45,4],[46,5],[14,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3:
 this.$ = $$[$0];
break;
case 4: case 5: case 6: case 7: case 9: case 10: case 14: case 15: case 16: case 17: case 18: case 19: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 65: case 66: case 67: case 68: case 69: case 72: case 73: case 74: case 78: case 87: case 88: case 99:
console.log($$[$0]);this.$=$$[$0];
break;
case 8: case 44: case 57: case 63: case 64: case 71: case 79: case 85: case 86: case 89: case 93: case 94: case 97: case 98: case 100:
console.log($$[$0-1]);this.$=$$[$0-1];
break;
case 11: case 20: case 45: case 46: case 47: case 48: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 58: case 59: case 61: case 75: case 81: case 90: case 92:
console.log($$[$0-2]);this.$=$$[$0-2];
break;
case 12: case 60: case 76: case 106: case 109:
console.log($$[$0-4]);this.$=$$[$0-4];
break;
case 13: case 62: case 80: case 95: case 101: case 103: case 104: case 105: case 107: case 108: case 110:
console.log($$[$0-3]);this.$=$$[$0-3];
break;
case 49: case 91: case 96: case 102:
console.log($$[$0-5]);this.$=$$[$0-5];
break;
case 70: case 77: case 82:
console.log($$[$0-6]);this.$=$$[$0-6];
break;
case 83:
console.log($$[$0-10]);this.$=$$[$0-10];
break;
case 84:
console.log($$[$0-8]);this.$=$$[$0-8];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},{1:[3]},{5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),{12:[1,34]},o($Ve,[2,9]),o($Ve,[2,10]),{16:35,24:[1,36]},{17:[1,37]},o($Ve,[2,65]),o($Ve,[2,66]),o($Ve,[2,67]),o($Ve,[2,68]),o($Ve,[2,69]),{24:[1,38]},{17:$Vf,25:$Vg,52:$Vh,93:39},{98:[1,42]},{24:[1,43]},o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),{52:[1,44]},{52:[1,45]},{52:[1,46]},{52:[1,47]},{74:[1,48]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,8]),{12:[1,49],17:[1,50]},o($Vj,$Vf,{93:51,25:$Vg,52:$Vh}),{11:68,18:52,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{52:$Vh,93:85},o($Vz,[2,100]),{16:86,24:$VA},{15:90,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,53:[1,89],94:88},{11:68,18:91,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{52:$Vh,93:92},{24:$VB,26:93,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{82:[1,96]},{82:[1,97]},{7:98,15:99,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$VA},{4:104,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,77:$VC,78:103,81:$V7,87:$V8,88:100,89:$V9,90:$Va,91:$VD,92:$VE,95:$Vb,97:$Vc,108:$Vd},o($VF,[2,11]),{11:68,18:106,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{74:[1,107]},{12:[1,108]},o($Vz,[2,21],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ,62:$VR,63:$VS,66:$VT,67:$VU,103:[1,124]}),o($Vz,[2,22]),o($VV,[2,23]),o($VW,$VX,{64:[1,125]}),o($VV,[2,25]),o($VW,$VY,{93:39,52:$Vh}),o($VV,[2,27]),o($VV,[2,28]),o($VV,[2,29]),o($VV,[2,30]),o($VV,[2,31]),o($Vz,[2,32]),o($Vz,[2,33]),o($Vz,[2,34]),o($Vz,[2,35]),o($Vz,[2,36]),o($Vz,[2,37]),o($Vz,[2,38]),o($Vz,[2,39]),o($Vz,[2,40]),o($Vz,[2,41]),o($Vz,[2,42]),o($Vz,[2,43]),{24:$VB,26:126,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{52:[1,127]},{24:$VB,26:128,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{15:130,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$VB,26:129,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{52:[1,131]},{52:[1,132]},{52:[1,133]},{52:[1,134]},{52:[1,135]},{74:[1,136]},o($Vj,[2,20]),o($Vj,$Vf,{25:$Vg}),{53:[1,137]},o($VZ,[2,93]),{24:[1,138]},{12:[1,139],98:[1,140]},{12:[1,141]},{47:$VG,48:$VH,49:$VI,50:$VJ,53:[1,142],54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ,62:$VR,63:$VS},o($VV,$VX),o($VV,$VY),{53:[1,143]},{53:[1,144]},{12:[1,145]},{16:35,24:$VA},{79:[1,146]},{12:[1,147]},{12:[1,148]},{79:[2,87]},{6:33,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,79:[2,88],81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},{11:68,12:[1,149],18:150,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{12:[1,151]},{4:104,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,77:$VC,78:103,81:$V7,87:$V8,88:152,89:$V9,90:$Va,91:$VD,92:$VE,95:$Vb,97:$Vc,108:$Vd},o($VF,[2,13]),{24:$VB,26:153,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:154,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:155,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:156,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:157,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:158,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:159,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:160,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:161,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:162,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:163,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:164,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},{24:$VB,26:165,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},o($Vz,[2,63]),o($Vz,[2,64]),{104:[1,166],107:[1,167]},{11:68,18:168,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},o($VV,[2,44]),{24:$VB,26:169,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},o($V_,[2,57],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ}),{47:$VG,48:$VH,49:$VI,50:$VJ,53:[1,170],54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ,62:$VR,63:$VS},{53:[1,171]},{11:68,18:172,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{11:68,18:173,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{11:68,18:174,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{11:68,18:175,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{11:68,18:176,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{4:180,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,77:[1,178],81:$V7,87:$V8,89:$V9,90:$Va,91:[1,179],95:$Vb,96:177,97:$Vc,108:$Vd},o($VZ,[2,92]),{25:[1,181],53:[2,94]},o($Ve,[2,101]),{99:[1,182]},o($Ve,[2,110]),{74:[1,183]},{74:[1,184]},{74:[1,185]},{82:[1,186]},{87:[1,187]},{79:[2,85]},{79:[2,86]},o($V$,[2,89]),{12:[1,188]},o($VF,[2,12]),{79:[1,189]},o($V01,[2,45],{49:$VI,50:$VJ,54:$VK}),o($V01,[2,46],{49:$VI,50:$VJ,54:$VK}),o($VV,[2,47]),o($VV,[2,48]),o($VV,[2,50]),o($V11,[2,51],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,57:$VN,58:$VO,59:$VP,60:$VQ}),o($V11,[2,52],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,57:$VN,58:$VO,59:$VP,60:$VQ}),o($V21,[2,53],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK}),o($V21,[2,54],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK}),o($V21,[2,55],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK}),o($V21,[2,56],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK}),o($V_,[2,58],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ}),o([12,25,53,63,64,65,66,67,98,103],[2,59],{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ,62:$VR}),{52:[1,190]},{52:[1,191]},{65:[1,192]},{25:[1,193],47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ,62:$VR,63:$VS},o($Vz,[2,61]),{11:68,18:194,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{53:[1,195]},{53:[1,196]},{53:[1,197]},{53:[1,198]},{53:[1,199]},{79:[1,200]},{12:[1,201]},{12:[1,202]},{6:33,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,79:[2,99],81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd},{15:90,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,94:203},{12:[1,204]},{4:208,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,75:205,77:$V31,78:207,81:$V7,87:$V8,89:$V9,90:$Va,92:$VE,95:$Vb,97:$Vc,108:$Vd},{83:209,84:210,85:$V41,86:$V51},{4:104,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,77:$VC,78:103,81:$V7,87:$V8,88:213,89:$V9,90:$Va,91:$VD,92:$VE,95:$Vb,97:$Vc,108:$Vd},{12:[1,214]},{52:[1,215]},o($V$,[2,90]),o($Ve,[2,91]),{53:[1,216]},{53:[1,217]},{11:68,18:218,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{24:$VB,26:219,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,47:$Vq,51:$Vr,61:$Vt},o($Vz,[2,62]),o($Vz,[2,103]),o($Vz,[2,104]),o($Vz,[2,105]),o($Vz,[2,107]),o($Vz,[2,108]),o($Ve,[2,96]),{79:[2,97]},{79:[2,98]},{53:[2,95]},o($Ve,[2,102]),{76:220,79:[1,221]},{12:[1,222]},o($V$,[2,72]),o($V$,[2,73],{7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,68:13,69:14,70:15,71:16,72:17,6:33,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,73:$V6,81:$V7,87:$V8,89:$V9,90:$Va,95:$Vb,97:$Vc,108:$Vd}),{79:[1,223]},{79:[2,78],83:224,84:210,85:$V41,86:$V51},{11:68,18:225,24:$Vk,26:53,27:54,28:55,29:56,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:64,37:65,38:66,39:67,40:69,41:70,42:71,43:72,44:73,45:74,46:75,47:$Vq,51:$Vr,52:$Vs,61:$Vt,100:$Vu,101:$Vv,102:$Vw,105:$Vx,106:$Vy},{65:[1,226]},{79:[1,227]},{24:$VB,26:229,28:55,29:94,30:57,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,39:228,47:$Vq,51:$Vr,61:$Vt},{82:[1,230]},o($Vz,[2,106]),o($Vz,[2,109]),o($Vz,[2,60]),{47:$VG,48:$VH,49:$VI,50:$VJ,53:[1,231],54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ,62:$VR,63:$VS},o($Ve,[2,70]),o($Ve,[2,74],{80:[1,232]}),o($V$,[2,71]),o($Ve,[2,77]),{79:[2,79]},{65:[1,233]},{4:208,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,75:234,77:$V31,78:207,81:$V7,87:$V8,89:$V9,90:$Va,92:$VE,95:$Vb,97:$Vc,108:$Vd},o($Ve,[2,82]),{53:[1,235]},{47:$VG,48:$VH,49:$VI,50:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO,59:$VP,60:$VQ,62:$VR,63:$VS,66:$VT,67:$VU},{53:[1,236]},o($VV,[2,49]),{68:237,73:$V6,74:[1,238]},{4:208,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,75:239,77:$V31,78:207,81:$V7,87:$V8,89:$V9,90:$Va,92:$VE,95:$Vb,97:$Vc,108:$Vd},o($V$,[2,81]),{74:[1,240]},{12:[1,241]},o($Ve,[2,75]),{4:208,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,75:242,77:$V31,78:207,81:$V7,87:$V8,89:$V9,90:$Va,92:$VE,95:$Vb,97:$Vc,108:$Vd},o($V$,[2,80]),{4:104,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,19:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,68:13,69:14,70:15,71:16,72:17,73:$V6,77:$VC,78:103,81:$V7,87:$V8,88:243,89:$V9,90:$Va,91:$VD,92:$VE,95:$Vb,97:$Vc,108:$Vd},o($Ve,[2,84]),{79:[1,244]},{79:[1,245]},o($Ve,[2,76]),o($Ve,[2,83])],
defaultActions: {32:[2,1],103:[2,87],147:[2,85],148:[2,86],201:[2,97],202:[2,98],203:[2,95],224:[2,79]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//const {Aritmetica,tipoArit} = require('./expresion/Aritmetica')
//const {Relacional,TipoRel} = require('./expresion/relaciones')
//const {tipo} = require('./expresion/retorno')
//const {Variable} = require('./expresion/variable')
//const {Nativo,tipoNat} = require('./expresion/nativo')
//const {Declarar} = require('./instrucciones/declarar')
//const {Print} = require('./instrucciones/print')
//const {Bloque} = require('./instrucciones/bloque')
//const {If} = require('./instrucciones/If')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2:return 48;
break;
case 3:return 47;
break;
case 4:return 50;
break;
case 5:return 49;
break;
case 6:return 54;
break;
case 7:return 61;
break;
case 8:return 52;
break;
case 9:return 53;
break;
case 10:return 74;
break;
case 11:return 79;
break;
case 12:return 'corcheteabre';
break;
case 13:return 'corchetecierra';
break;
case 14:return 25;
break;
case 15:return 12;
break;
case 16:return 17;
break;
case 17:return 103;
break;
case 18:return 64;
break;
case 19:return 65;
break;
case 20:return 55;
break;
case 21:return 56;
break;
case 22:return 58;
break;
case 23:return 60;
break;
case 24:return 57;
break;
case 25:return 59;
break;
case 26:return 63;
break;
case 27:return 62;
break;
case 28:return 66;
break;
case 29:return 67;
break;
case 30:return 98;
break;
case 31:return 19;
break;
case 32:return 20;
break;
case 33:return 21;
break;
case 34:return 22;
break;
case 35:return 23;
break;
case 36:return 51;
break;
case 37:return 'resnew';
break;
case 38:return 73;
break;
case 39:return 80;
break;
case 40:return 81;
break;
case 41:return 85;
break;
case 42:return 86;
break;
case 43:return 87;
break;
case 44:return 89;
break;
case 45:return 90;
break;
case 46:return 77;
break;
case 47:return 91;
break;
case 48:return 92;
break;
case 49:return 95;
break;
case 50:return 97;
break;
case 51:return 99;
break;
case 52:return 100;
break;
case 53:return 101;
break;
case 54:return 102;
break;
case 55:return 104;
break;
case 56:return 105;
break;
case 57:return 106;
break;
case 58:return 107;
break;
case 59:return 108;
break;
case 60:return 33;
break;
case 61:return 34;
break;
case 62:return 35;
break;
case 63:return 24;
break;
case 64:return 31;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 32; 
break;
case 66:return 5;
break;
case 67:console.log(yy_.yylloc.first_line, yy_.yylloc.first_columm, 'Lexico', yy_.yytext)
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:\/\/.*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?::)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:<<)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}